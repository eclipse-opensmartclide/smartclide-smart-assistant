,full_name,link,description,stars,forks,watchers,keywords,source
0,Alzhimers-Disease-Prediction-Using-Deep-learning,https://github.com/himanshub1007/Alzhimers-Disease-Prediction-Using-Deep-learning.git,"# AD-Prediction  Convolutional Neural Networks for Alzheimer's Disease Prediction Using Brain MRI Image  ## Abstract Alzheimers disease (AD) is characterized by severe memory loss and cognitive impairment. It associates with significant brain structure changes, which can be measured by magnetic resonance imaging (MRI) scan. The observable preclinical structure changes provides an opportunity for AD early detection using image classification tools, like convolutional neural network (CNN). However, currently most AD related studies were limited by sample size. Finding an efficient way to train image classifier on limited data is critical. In our project, we explored different transfer-learning methods based on CNN for AD prediction brain structure MRI image. We find that both pretrained 2D AlexNet with 2D-representation method and simple neural network with pretrained 3D autoencoder improved the prediction performance comparing to a deep CNN trained from scratch. The pretrained 2D AlexNet performed even better (**86%**) than the 3D CNN with autoencoder (**77%**).  ## Method #### 1. Data In this project, we used public brain MRI data from **Alzheimers Disease Neuroimaging Initiative (ADNI)** Study. ADNI is an ongoing, multicenter cohort study, started from 2004. It focuses on understanding the diagnostic and predictive value of Alzheimers disease specific biomarkers. The ADNI study has three phases: ADNI1, ADNI-GO, and ADNI2. Both ADNI1 and ADNI2 recruited new AD patients and normal control as research participants. Our data included a total of 686 structure MRI scans from both ADNI1 and ADNI2 phases, with 310 AD cases and 376 normal controls. We randomly derived the total sample into training dataset (n = 519), validation dataset (n = 100), and testing dataset (n = 67).  #### 2. Image preprocessing Image preprocessing were conducted using Statistical Parametric Mapping (SPM) software, version 12. The original MRI scans were first skull-stripped and segmented using segmentation algorithm based on 6-tissue probability mapping and then normalized to the International Consortium for Brain Mapping template of European brains using affine registration. Other configuration includes: bias, noise, and global intensity normalization. The standard preprocessing process output 3D image files with an uniform size of 121x145x121. Skull-stripping and normalization ensured the comparability between images by transforming the original brain image into a standard image space, so that same brain substructures can be aligned at same image coordinates for different participants. Diluted or enhanced intensity was used to compensate the structure changes. the In our project, we used both whole brain (including both grey matter and white matter) and grey matter only.  #### 3. AlexNet and Transfer Learning Convolutional Neural Networks (CNN) are very similar to ordinary Neural Networks. A CNN consists of an input and an output layer, as well as multiple hidden layers. The hidden layers are either convolutional, pooling or fully connected. ConvNet architectures make the explicit assumption that the inputs are images, which allows us to encode certain properties into the architecture. These then make the forward function more efficient to implement and vastly reduce the amount of parameters in the network.  #### 3.1. AlexNet The net contains eight layers with weights; the first five are convolutional and the remaining three are fully connected. The overall architecture is shown in Figure 1. The output of the last fully-connected layer is fed to a 1000-way softmax which produces a distribution over the 1000 class labels. AlexNet maximizes the multinomial logistic regression objective, which is equivalent to maximizing the average across training cases of the log-probability of the correct label under the prediction distribution. The kernels of the second, fourth, and fifth convolutional layers are connected only to those kernel maps in the previous layer which reside on the same GPU (as shown in Figure1). The kernels of the third convolutional layer are connected to all kernel maps in the second layer. The neurons in the fully connected layers are connected to all neurons in the previous layer. Response-normalization layers follow the first and second convolutional layers. Max-pooling layers follow both response-normalization layers as well as the fifth convolutional layer. The ReLU non-linearity is applied to the output of every convolutional and fully-connected layer. ![](images/f1.png)  The first convolutional layer filters the 224x224x3 input image with 96 kernels of size 11x11x3 with a stride of 4 pixels (this is the distance between the receptive field centers of neighboring neurons in a kernel map). The second convolutional layer takes as input the (response-normalized and pooled) output of the first convolutional layer and filters it with 256 kernels of size 5x5x48. The third, fourth, and fifth convolutional layers are connected to one another without any intervening pooling or normalization layers. The third convolutional layer has 384 kernels of size 3x3x256 connected to the (normalized, pooled) outputs of the second convolutional layer. The fourth convolutional layer has 384 kernels of size 3x3x192 , and the fifth convolutional layer has 256 kernels of size 3x3x192. The fully-connected layers have 4096 neurons each.  #### 3.2. Transfer Learning Training an entire Convolutional Network from scratch (with random initialization) is impractical[14] because it is relatively rare to have a dataset of sufficient size. An alternative is to pretrain a Conv-Net on a very large dataset (e.g. ImageNet), and then use the ConvNet either as an initialization or a fixed feature extractor for the task of interest. Typically, there are three major transfer learning scenarios:   **ConvNet as fixed feature extractor:** We can take a ConvNet pretrained on ImageNet, and remove the last fully-connected layer, then treat the rest structure as a fixed feature extractor for the target dataset. In AlexNet, this would be a 4096-D vector. Usually, we call these features as CNN codes. Once we get these features, we can train a linear classifier (e.g. linear SVM or Softmax classifier) for our target dataset.   **Fine-tuning the ConvNet:** Another idea is not only replace the last fully-connected layer in the classifier, but to also fine-tune the parameters of the pretrained network. Due to overfitting concerns, we can only fine-tune some higher-level part of the network. This suggestion is motivated by the observation that earlier features in a ConvNet contains more generic features (e.g. edge detectors or color blob detectors) that can be useful for many kind of tasks. But the later layer of the network becomes progressively more specific to the details of the classes contained in the original dataset.   **Pretrained models:** The released pretrained model is usually the final ConvNet checkpoint. So it is common to see people use the network for fine-tuning.  #### 4. 3D Autoencoder and Convolutional Neural Network We take a two-stage approach where we first train a 3D sparse autoencoder to learn filters for convolution operations, and then build a convolutional neural network whose first layer uses the filters learned with the autoencoder. ![](images/f2.png)  #### 4.1. Sparse Autoencoder An autoencoder is a 3-layer neural network that is used to extract features from an input such as an image. Sparse representations can provide a simple interpretation of the input data in terms of a small number of \parts by extracting the structure hidden in the data. The autoencoder has an input layer, a hidden layer and an output layer, and the input and output layers have same number of units, while the hidden layer contains more units for a sparse and overcomplete representation. The encoder function maps input x to representation h, and the decoder function maps the representation h to the output x. In our problem, we extract 3D patches from scans as the input to the network. The decoder function aims to reconstruct the input form the hidden representation h.  #### 4.2. 3D Convolutional Neural Network Training the 3D convolutional neural network(CNN) is the second stage. The CNN we use in this project has one convolutional layer, one pooling layer, two linear layers, and finally a log softmax layer. After training the sparse autoencoder, we take the weights and biases of the encoder from trained model, and use them a 3D filter of a 3D convolutional layer of the 1-layer convolutional neural network. Figure 2 shows the architecture of the network.  #### 5. Tools In this project, we used Nibabel for MRI image processing and PyTorch Neural Networks implementation.",31,8,31,3d+vector+space,GitHub
1,1,https://github.com/pxvr-official/1.git,"無許諾配信 企業理念剽窃 動物の森収益化 大神ミオ権利者削除 戌神権利侵害発言 常闇トワ炎上 夜空メルストーカー被害 建築王サポーター放置 赤十字マーク 魔乃アロエ卒業 一つの中國支持声明 大空昴3Dライブ 無限延期清掃員職業差別 日清コラボ楽曲 musedash非公開 rog案件取り消し 壁画ライブ 丁真 Ding Zhen 郑爽 Zheng Shuang 防护林 与朵小天使w 伊月猫凛 本主萌埋午休傻 汪峰 重生细胞 壁纸 比利海灵顿 香蕉君 van 田所浩二 抽象带篮子 抗压背锅吧 季子越 蒋明辉 傻逼 脑残 杀人放火 人身攻击 强️奸罪 路人甲 路人乙 厚大法考 男妈妈 谢拉 cierra 米娅 mia runis 卧龙寺 火影忍者 漩涡鸣人 央视新闻 观察者网 环球时报 咩栗 呜米 鹰角 阿米娅 电棍otto 熊出没 熊大 熊二 光头强 Paryi 帕里 吃花椒的喵酱 王冰冰 回形针Papercilp 吴松磊 张每羊 赛雷三分钟 肉蛋奶 巴西雨林 原创动力 方特卡通 贝瓦儿歌 早教 小天使 搜索引擎 百度 谷歌 腾讯 小丑 沙口 Shaco 天宫赐福 公主连接 凯露 新概念 会议 IT工作者 区块 人工智能 创作平台 MMD模型 操作系统 战斗吧歌姬 神宫司玉藻 李清歌 菜菜子 蔡明 花丸晴琉 花丸はれる 刻晴 可莉 緋赤エリオ 绯赤艾莉欧 Hiseki Erio 李子柒 宠物狗 正能量 公益广告 江南水乡 旅游 城市 机萪 妙妙 996 马云 向晚大魔王 贝拉kira 珈乐Carol 嘉然今天吃什么 乃琳Queen 拼多多 饿了么 工人 假期 资本家 资本主义 华尔街 机器人 微软 代码 技术 Markdown 肯德基 花园serena 花園セレナ 交通运输 大卡车 摩托车 电动车 汽车 健康 DD情报局 是牧羊女 盎然酱 中国风 中國風 进击的冰糖 申䒕雅 Shen Xiaoya 上海广播电视台 Shanghai Media Group Limited 四川熊猫协会 Sichuan Panda Association ao3 pixiv cf教父 王戈wg 吃草莓的果子狸 萌宠 国宝 youtube niconico 时下流行 地瓜鸽子丶 Archive of Our Own 搞笑 恶搞 Tupolevbureau 行星之牙w午休傻 永远永远酱w 苍井空 波多野结衣 暴走漫画 王尼玛 马保国 ma baoguo 年轻人不讲武德 耗子尾汁 表情包 独轮车 nightbot 夜酱 哔哩哔哩 bilibili vtuber 英雄联盟 League of Legends 王者荣耀 Honor of Kings 明日方舟 Arknights 碧蓝航线 Azur Lane 原神 Genshin Impact 孙悟空 sun wukong 曹操 cao cao 刘备 liu bei ホロライブ hololive 诸葛亮 诸葛孔明 ZhuGe Kongming 王司徒 Wang Situ 金坷垃 noripro 恶俗娘 Esugirl 心萪 Xin Ke 新科娘 Shinka Musume 咕噜大魔王w cv某神话 cctv新科动漫 བོད་ཡིག། tibet 西藏 藏语 维吾尔语 ئۇيغۇر تىلى 虚拟up主 喜羊羊与灰太狼 Pleasant Goat and Big Big Wolf 美羊羊 Mei yangyang 懒羊羊 lan yangyang 沸羊羊 fei yangyang 陈昱昊 chen lihao 陈导师 宫本美代子 二次元 Two Dimensional 巴啦啦小魔仙 凌美琪 Ling Meiqi 凌美雪 Ling Meixue 大当家 12dora 李洪志被孙笑川殴打 Li Hongzhi was beaten by Sun Xiaochuan 射精 ejaculate 灰太狼内射蔡英文 Hui Tailang fucks Tsai Ing-wen 1989年政治风波 Chinese political turmoil of 1989 暴徒残忍杀害解放军 Thugs brutally killed people's Liberation Army 开挂 Open Hanging overidea 张京华 kyou ka 黑桃影 Spade Echo 史蒂夫 steve 操你妈藏独 mother fucker free tibet 新疆维吾尔人肏郭文贵亲妈 Xinjiang Uyghur fucks Guo Wengui mother 明秽网 Shithui 大妓院 Bitchtimes 邪教法轮功 Cult Falun Gong 掏粪男孩 tfboys 王源 Wang Yuan 王俊凯 Wang Junkai 易烊千玺 Yi Yangqianxi 伏拉夫 财富密码 maxkim 籽岷 Zi Min 达赖喇嘛卖枪被美国警察击毙 Dalai Lama was killed by American police for selling guns 敬汉卿和白上吹雪床上运动 Jing Hanqing and Shirakami Fubuki exercise on bed 我的世界 minecraft 角巻わため 角卷绵芽 香蕉君 Ricardo Milos 肖战 Xiao Zhan 王一博 Wang Yibo 神楽めあ 神乐mea Kagura Mea 湊あくあ 湊-阿库娅 Minato Aqua 张三 Zhang San 罗翔讲刑法 Luo Xiang Speaking of Criminal Law 陈情令 chen qingling 谷乡元昭 Tanigou_Motoaki 福田一行 Fukuda_Ikko 须田仁之 Suda_Kimiyuki 犬山たまき 犬山玉姬 ak47 快手 Kuaishou 抖音 Tiktok 土味 m4a1 mp5 戌神ころね 戌神沁音 司马南 Si Manan 崔永元 Cui Yongyuan 方方 老鼠榨汁 Mouse Juice 三吱 猫又おかゆ 猫又小粥 电蚊拍 粉丝会 兎田ぺこら 兔田佩克拉 谷乡元昭 福田一行 须田仁之 安倍晋三 菅义伟 潤羽るしあ 润羽露西娅 炎上 杀虫剂 刘德华 周杰伦 猪猪侠 小猪佩奇 土味 古风电音 白上フブキ 白上吹雪 熊大 熊二 光头强 张靓颖 邓紫棋 张艺兴 说唱 饭圈 穿越火线 反恐精英 星街彗星 星街すいせい 猫宫日向 隐神木荫 九石玉 斗鱼 虎牙 赤井はあと 赤井心 宋旺霖 姚纳多 肖彦锐 磁大师 周淑怡 夏色まつり 夏色祭 马牛逼 神楽七奈 かぐらなな 鹿乃 卢本伟 wh1t3zz 虎哥 刀哥 沃玛 warma hanser 憨八嘎 泠鸢yousa 冷鸟 魔法少女乐府酱 孙笑川 吴亦凡 蔡徐坤 鸡你太美 敬汉卿 死神之子 女胖胖 徐梦圆 屑狐狸 国家一级保护动物 徐大sao lexburner 卡布奇诺 芜湖大司马 csgo大茄子 萌宠 国宝 佃煮海苔男 成都大熊猫繁育研究基地 桐生可可 桐生ココ kson 蛆皇 石巍斌 小学生 李可欣 徐文楷 凤凰战士 电牛子 奥利给 奥力给 朝阳冬泳怪鸽 pdd骚猪 刘谋 韩金龙 nga玩家社区 电竞 最终幻想7,三国志14,生化危机3,集合啦!动物之森,仁王2,赛博朋克2077,女神异闻录5,魔兽争霸3重制版,Destiny,部落与弯刀 Sands of Salzaar,中国式家长,刺激战场,绝地求生,第五人格,三国,传奇,助手,游戏,腾讯,网易,全军出击,三国杀,传奇私服,阴阳师,三国游戏,荒野行动,策略,仙剑,皇室战争,传奇游戏,修仙,策略游戏,传奇游戏,英雄杀,传奇霸业,热血传说,战争,梦幻家园,动作游戏,时空召唤,乱世王者,游戏大全,寻仙,传奇单机,魔兽,仙侠游戏,三国策略,铁头英雄,自由幻想,荒野求生,绝地,英魂,热血传奇,lol,虚荣,陪我,时空猎人,热血,剑灵,mt,免费游戏,守望先锋,策略三国,打仗游戏,game,小小英雄,世界,王者传奇,战争游戏,自由之战,混沌与秩序,小米超神,先锋,征途,火线精英,我是mt,修真,大型游戏,剑三,烈火传奇,梦三国,魔域口袋,求生,荒野,剑雨,dota2,联机游戏,回合游戏,传世,成人游戏,3v3,赚钱游戏,决战,指尖,掌上,热门游戏,阿瓦隆,征途2,三国杀单机,网络游戏,战争策略,英雄榜,策略卡牌,刀锋世界,英雄,烈焰传奇,中文版,荣耀联盟,全面战争,games,绝地求生。,二、求生之路,混沌,游泳,战国时代,七雄争霸,混沌与秩序2,对战游戏,Ping,游戏人生,我叫,奇迹,新世界,小小军团,3v3游戏,5v5游戏,掌上青城,解压游戏,水煮三国,仙剑情缘,娱乐,时空,地主,平台,王者纪元,天堂,情侣,炫酷游戏,战场,热血私服,战争艺术,天堂2,魂斗罗经典,三国策,剑网,荒岛,跳舞游戏,龙之谷,竞技游戏,久游,传奇英雄,免费游戏大全,阴阳,欧陆战争5,世界迷雾,同城游戏,我的英雄学院,天堂虚荣,魔界,三国策略游戏,偶像梦幻祭,龙城,谋定三国,陪聊,指尖帝国,乱世枭雄,刺激游戏,mata,真三国,自由之战2,蜀山传奇,战国七雄,下跪天堂,世界战争英雄,掌上联盟,永恒传说,三国之刃,沙盒游戏,人格,热血永恒,对战,乱战三国,超能战队,永恒,英雄坛说,热血传奇1.76,仙灵,凡人修真,铁头,学院,召唤,长安,两人游戏,新三国杀,天使,新游戏,传说,九天使,战争进化,战斗,斗罗,帝王三国,仙侣奇缘,攻略,古代战争,慢动作,策略养成,自由,mp4,正版传奇,无尽,遊戲,诺亚传说,梦幻庄园,超凡三国,刀锋,魔芋,王者对决,混沌之戒,我叫mt3,tgp地下城,策略塔防,战争雷霆,守望,地下,仙途,口袋学院,大人游戏,英雄战歌,求生游戏,末日求生,牌类游戏,倩女幽魂2,陪你,剑侠奇缘,六龙争霸,龙之牧场,5v5竞技,孤岛,爆笑三国,傲世三国,娱乐游戏,终结者二,策略类游戏,生存世界,经营策略游戏,亲朋游戏,第五人格。,三、世界战争,荒岛特训,龙之岛,偶像,绝地战场,乱世,棋牌,创造游戏,电玩游戏,仙履奇缘,小世界,仙剑单机,守望英雄,无网游戏,白蛇传说,热血高校,富甲天下,召唤师,你的世界,荒岛生存,三国名将,我是传奇,争霸,单机动作游戏,合击传奇,超神,模拟战争,连机游戏,英雄传说,三国战场,lolo,橘子娱乐,火线传奇,出击,红斗罗,战争与秩序,修真世界,新游,陪游,我的家园,最火游戏,烽火战国,三国英雄传,免费游戏下载大全,组我,steam游戏,升级游戏,三国游戏单机,混乱与秩序,小小三国,逐鹿三国,电影游戏,找东西游戏,三國,激战奇轮,终极者,超时空,英雄战魂,英雄使命,行动,战争策略游戏,网页游戏,征服,之乎,九游游戏,现在战争,热血之刃,梦幻龙族,无尽争霸,5vs5,无尽梦魇,王者召唤,玛法传奇,对打,车祸英雄,艾尔战记,无敌,端游,魔兽塔防,5v5对战,荒岛余生,剑魂,战国策,胡来三国,团队游戏,傲视三国,未来战争,天空战记,穿越古代,水浒,之刃,二人游戏,龙世界,崩坏学院,无聊游戏,王者超神,电脑游戏,建造世界,三百英雄,推塔游戏,三国猛将,自由世界,西瓜游戏,雄霸三国,梦幻奇缘,虐杀,天使帝国,光荣,小小帝国,小小英雄传,快打三国,在线游戏,英雄行星,热血盛世,仙剑奇缘,仙剑游戏,英雄祭,时光召唤,仙剑5,仙侣,盛世三国,新传奇,秦国,战场英雄,仙剑世界,自由职业,赤月传奇,人气游戏,王者争霸,荣耀战场,仙剑问情,战场游戏,仙剑3,仙剑五。,四、三国名将传奇,太平洋战争,征战三国,5对5,守塔,女生游戏,传奇永恒,新款游戏,口袋三国,王者之心,谋三国,三国来了,蜀山奇缘,三国传奇,三国时代,即时游戏,穿越游戏,打游戏,永恒王者,烽火三国,更多游戏,狂斩三国,王者之战,战争塔防,武极天下,三国策略传奇,传奇无双,战争英雄,战神荣耀,混搭与秩序,所有免费游戏,王者世界,流行游戏,暴龙,无尽的传说,逆转三国,自由游戏,自由之翼,小小塔防,荣耀三国,三国类游戏,有趣游戏,挑战游戏,热血王者,英雄远征,梦幻之翼,传奇归来,暗黑地下城,卖东西游戏,游戏,,指尖刀塔,大话三国,的游戏,坑人游戏,众神之战,英雄徽章,乱斗三国,剑神,悠闲游戏,横扫三国,三国攻城,天剑奇缘,超神英雄,超神之路,赵云传奇,绝地求生,大逃杀,吃鸡,反恐精英:全球攻势,WallpaperEngine,Dota2,刀塔2,侠盗猎车手5,求生之路2,怪物猎人:世界,巫师3:狂猎,无主之地2,饥荒联机版,星际战甲,判变,文明5,杀戮尖塔,收获日2,全境封锁,古墓丽影:崛起,以撒的结合:重生,传送门2,战斗砖块剧场,都市:天际线,蝙蝠侠:阿甘骑士,欧洲卡车模拟,奇异人生,军团要塞,巧克力和香子兰,GTA5,天命奇御,波西亚时光,腐蚀,愤怒军团,龙魂时刻,斗兽战棋,,艾希,三色绘恋,波西亚时光,返校,代价,死神来了,超级巨星,地狱少女,拉比哩比,万圣节大冒险,点点联盟,龙骑士,困兽禁地,武器店物语,斯巴达大战僵尸,前进,天空塔,孤姬,我和她的世界末日,方块枪,拯救大魔王,没有人知道的大冒险。,五、美好世界,龙崖,山桂,光明重影,上帝之城,血色代码,流浪者,商人传说,初体计划,僵死之日,巫术花园,电竞俱乐部,小三角大英雄,冷鲜肉,你抓不到我,猫猫游戏,恶果之地,前程似锦,我是英雄,十二色的季节,方舟,生存进化,神界,原罪,色情,小黄油,成人内容,裸露,暴露,暴力,血腥,色情内容,搞笑,休闲,欢乐,沙盒,怀旧,可爱,快节奏,动作角色扮演,卡牌,爱情,战术角色扮演,轻游戏,策略角色扮演,少女游戏,超级英雄,角色动作,体验,关羽,吕布,张飞,赵云,黄忠,诸葛亮,郭嘉,袁绍,袁术,曹操,典韦,许褚,张辽,徐晃,张郃,孙权,刘备,孙策,太史慈,姜维,马超,韩信,貂蝉,小乔,大乔,西施,王昭君,杨玉环,孙尚香,花木兰,孙悟空,紫霞仙子,后羿,牛魔王,西游,西游记,三国演义,三国志,水浒传,潘金莲,武松,鲁智深,林冲,林黛玉,红楼梦,全民王者,神之浩劫,赤潮,好玩游戏,好玩的游戏,女神,部落,好评,好评如潮,好评游戏,好评如潮游戏,流放之路,足球经理,人渣,枪火游侠,钢铁雄心,黑色沙漠,死亡边界,战团,无人深空,影之诗。,六、神庙逃亡电脑版,拳皇,数独,使命召唤,射雕英雄传,保垒之夜,欢乐斗地主,黄金矿工,大富翁,超级玛丽,合金弹头,泡泡堂,仁王,猎天使魔女,密室逃脱,暴力摩托,幽灵行动,三国战记,坦克大战,攻城略地,极品台球,不义联盟,找你妹,斗罗大陆,盗墓笔记,创世纪,杀破狼,塔防三国志,神仙道,群英会,弹弹堂,大皇帝,满江红,战争之王绝代双骄,传奇霸业,攻城掠地,东风破,朝歌,小李飞刀,王朝霸域,梦幻西游,逆水寒,天涯明月刀,坦克世界,穿越火线,神武,问道,诛仙,新倩女幽魂,剑灵,逆战,封印者,天龙八部,激战,风暴英雄,九阴真经,游戏人生,传奇世界,流星蝴蝶剑,灵山奇缘,斗战神,少年三国志,炉石传说,崩坏,楚留香,三国乱世,城堡争霸,三国如龙传,放开那三国,部落战争,魔法王座,啪啪三国,神魔,逐鹿中原,火箭联盟,勇者斗恶龙,深岩银河,传说法师,乌托邦,丛林地狱,地下城,火星求生,铁路帝国,信使,史诗级战争模拟器,开拓者,死亡岛,终极合集,天国:拯救,猎杀,对决,守墓人,求生伐,战镰,奇异人生,异星工厂,幽灵主义,亚利桑那阳光,不列颠的王座,魔能,空洞骑士,无穷无尽,命运石之门,莎木,潮汐之王,多人玩的游戏,城市,天际线,精灵与森林,冰汽时代,耻辱,鬼泣,龙之信条,黑暗觉醒,大神,影子战术,狂战传说,街霸,少女射击,刀剑神域,热情传说,女巫来了,夜袭,生化奇兵,王国风云,铁拳,隐龙传,尘世之狼,圣殿春秋,兄弟,堕落军团,陷阵之志,史前埃及,泰坦之旅,女神骑士团,爆裂,鬼刃,福利,礼包,奖励,良心,良心游戏,国产良心,勇士,公会,战队,青铜,白银,黄金,大师,白金,钻石,至尊,宝箱,符文,宝石,红钻,金币,美人,美女,妹子。,七、这是我的战争,星露谷物语,以撒的结合：重生,洪潮之焰,塔科马,拯救者,掘地求升,远征军：维京,方舟生存进化,疯狂之冠,救赎之路,光明记忆,金庸群侠传,幻想三国志,三国志：汉末霸业,圣女战旗,红石遗迹,无名之辈,侠客前传,归家异途,侠客风云传,光荣使命,符石守护者,高考恋爱100天,轩辕剑,失落城堡,风卷残云,新剑侠传奇,古剑奇谭,仙剑奇侠传,古龙群侠传,剑侠情缘,三国群英传,盐和避难所,废品机械师,看火人,旁观者,影子战术将军之刃,人类：一败涂地,血战西部,暗黑地牢,防御阵型,挺进地牢,传说之下,墓园,奥日与黑暗森林,拳击俱乐部,见证者,星球基地,以撒的结合：胎衣,天空之山,监狱建筑师,环世界,崩溃大陆,荒神,星界边境,无人之境,风之旅人,旅途,机械迷城,堡垒,菲斯,地狱边境,死亡细胞,终结将至,缺氧,逃脱者,茶杯头,街头霸王,量子破碎,黑暗之魂,羞辱,地铁：最后的曙光,生化奇兵：无限,蝙蝠侠：阿甘骑士,彩虹六号围攻,罗马之子,死或生,细胞分裂,武装突袭,孤岛危机,勿忘我,合金装备崛起复仇,刺客信条：枭雄,刺客信条：大革命,失落的星球,死亡空间,正当防卫,堕落之王,飙酷车神,刺客之王,蝙蝠侠：阿甘之城,暗黑血统,无限试驾,尘埃,子弹风暴,火爆狂飙：天堂,波斯王子,镜之边缘：催化剂,杀出重围人类分裂,质量效应：仙女座,毁灭战士,极限竞速,最终幻想,极品飞车,战地,牧场物语希望之光,不朽星球,诞生,魔界战记,妖精剑士,模拟狩猎,风语世界,三位一体,辐射避难所,万亿魔坏神,万众狂欢,放逐之城,暗影之刃,星球探险家,圣铠传说,王国英雄,进化之地,地狱潜者,光之子,双星物语,功夫熊猫,模拟人生,愤怒的小鸟,孢子,无夜之国,战神：夜袭,命运之手,东京迷城,超级马里奥奥德赛,荒野大镖客救赎,猎人：野性的呼唤,永恒之柱,合金装备幸存,异度之刃,流放者柯南,讨鬼传,孤岛惊魂原始杀戮,极限巅峰,海岛大亨,异星探险家,未转变者,看门狗,泰拉瑞亚,魔方世界,黑道圣徒,我的世界,上古卷轴,热血无赖,怪物猎人：世界,侏罗纪世界进化,塞尔达：荒野之息,刺客信条起源,混乱特工,盗贼之海,花园战争,死亡净化爆发,亿万僵尸,剑勇传奇,植物大战僵尸,启示录,腐烂国度,消逝的光芒,脱逃者：行尸走肉,求生指南,枪血黑手党,七日杀,节奏地牢,逃离死亡岛,僵尸维京,生化危机,往日不再,寂静岭：归乡,失忆症：黑暗后裔,唯一的幸存者,失忆症：猪猡,寂静岭：暴雨,逃生,死光,心灵杀手,沉睡之间,畸形,阴暗森林,异形：隔离,遗忘,光之镇,悬案：刹那惊颤,伊森卡特的消失,劫后余生：夺回,阿拉亚,地堡,小镇惊魂,恶灵附身,血源,昏迷,谋杀：灵魂疑犯,层层恐惧,白夜,太阳浩劫,黎明杀机,恐怖黎明,夜啼,直到黎明,无可救药,病号,黑镜,深夜廻,报复,灵魂筹码,漫漫长夜,吸血鬼,掠食,观察者,小梦魇,地狱之刃,深海迷航,战争机器,帝国：全面战争,信长之野望,帝国时代,魔兽争霸3,鹰击长空,狙击精英,骑马与砍杀,荣誉勋章,伟大时代：中世纪,地球防卫军,星球大战前线,战国无双,星际殖民,真三英杰传,战场女武神,剑刃风暴,真三国无双,奇点灰烬,灰蛊,泰坦陨落,文明：太空,幽浮,星际战舰,阿提拉：全面战争,英雄无敌3,银河文明,星际争霸,哥特舰队,群星,战锤：全面战争,女武神：苍蓝革命,荣耀战魂,星战前线,战锤：末世鼠疫,全战：不列颠王座,战争黎明,天国拯救,堡垒之夜,武林志,武林至尊,江湖,侠客,剑客,武林盟主,屠龙刀,二次元,暗黑破坏神,全民超神,英魂之刃,皇室战争,部落冲突。,八、打倒魔王的方法,夜雪冰娇,逆袭幻想传,美臀外卖,神医魔导,美女湾度假村,未发送的信,低魔时代,风之幻想曲,无尽之路,黄金之心,纂位者,公主的逃脱日常,冒险者与背包,风雷幻想曲,深海恶梦,星际冲突,宝石战纪,亿万大亨,巫术花园,掌控者,女巫剑,午后帝国,我在古堡炼金,果冻老爹,魔物娘物语,三巨头,你必须造一艘船,废宅魔王的幸福生活,求生大作战,梦蝶,三国传进化,淑女同萌,帝国主义,轮回与梦之旅人,回忆忘却之匣,炽热狙击,埋葬,坠落之后,卡牌大决斗,造王者,正义联盟,暗影议会,崩溃制造,帝国重生,空箱,东方火车,基因雨,简体中文,繁体中文,温室之城,鬼畜大冒险,秋之回忆,且听琴语,封神榜,五行师,魔物娘物语,忍者村大战,美丽新世界,吃鸡版,加速器,盒子,助手,代练,主播游戏,阿达三国志,无忧传奇,魅影传说,无敌天下,庐石传说,逆转三国,动作类游戏,赵云传奇,免费游戏女孩,老传奇,爬塔,传神,自由搏击,三国时代,城邦争霸,战国传承,有趣游戏,唯美游戏,所有免费游戏,外国游戏,分类游戏,纷争,更多游戏,龙之影,暗黑地下城,召唤神龙,如实传说,单件游戏,免费试用,魔域永恒,动脑游戏,超神之路,英雄坛,自由世界,横扫三国,策略战棋,最近游戏,悠闲游戏,高级游戏,炽天使,小龙游戏,游戏圈,我游戏,快游,火爆游戏,龙之契约,超神英雄,动作卡牌,英雄游戏,雷霆传奇,士兵荣耀,全面超神,盗梦英雄,伤害世界,战争策略游戏,虚荣vainglory,荒岛逃生,三国曹操,龙之召唤,操作游戏,任务游戏,霸三国,战龙三国,梦幻传说,打击游戏,打天下,皇室冲突,免费游戏排行,乱战三国,传奇英雄游戏,统一三国,暴打三国,时空之刃,全能英雄,战争风暴,我的部落,大闹三国,古风手游,伟大战争,女性游戏,激情游戏,征战,快打三国,关卡游戏,小小英雄传,魔兽单机,梦回三国,三国策略单机,通关游戏,红包游戏,英雄之剑,三国武神,三国英雄,卧龙三国,水浒三国,新三国,魔兽三国,攻防游戏,传奇传奇,天下无双,战争之王,热血帝王,网游三国,吞食三国,兵圣三国,水浒传奇,烈鸟传奇,传奇乱世,自由战争,三国娱乐,群雄争霸,荣耀征途,勇者荣耀,游戏三国,皇室荣耀,荣耀王者,荣誉,至尊荣耀,多塔学院,倒塔,王者虚荣,精品游戏,多塔联盟,无尽纷争,多塔传说,天堂之翼,霸王传说,英雄荣誉,英雄战场,大英雄,三国斩,远古战争,大众游戏,剑圣,自由战士,战国物语,英雄本色,正义之战,战场风云,新游,再战传奇,天尊传奇,散打游戏,王者归来,英雄之城,游戏王者,战国之王,王者之怒,三国之争,超神战迹,精选游戏,付费游戏,自由之光,世界游戏,游戏果粉,帝王纷争,英雄凯歌,英雄志,英雄争霸,激战三国,困难游戏,锤子三国,英雄动作,卡片三国,三国城池,英雄传奇,龙将三国,英雄兵团,决策三国,醉三国,懒人三国,霸气三国,英雄无畏,英雄之歌,纵横三国,九州三国,武林三国,武打游戏,本地游戏,搭防游戏,励志游戏,塔防战争,西游三国,英雄三国志,霸业三国,愿望单,评测游戏,游戏评测,鉴赏家推荐游戏,热销游戏,热销商品,精选游戏，我喜欢的游戏,便宜的游戏,合适喜加一的游戏,最新大作,最新3A游戏,特价游戏,降价游戏,促销游戏,每周特惠,夏日特卖游戏,冬季特卖游戏,最值得买的游戏,露西-她所希望的一切,元气骑士,好大夫,大天使之剑,刺客,大人游戏,橘子娱乐,帅土之滨,创造游戏,四大名著,即时游戏,塔防部落,刺客游戏,圣骑士,城建,刺杀,大战略,挑战游戏,高级游戏,最近游戏,色游戏,星座游戏,操作,为了部落,游戏头条,守护部落,部落战歌,部落时代,部落之战,终极刺客,部落奇兵,守卫部落,游戏赚钱,随机游戏,大神游戏,各种游戏,游戏宝盒,畅销游戏,游戏多多,大众游戏,华夏游戏,暴力游戏,侠之大者,四大名将,中国游戏,官方游戏,本地游戏,金典游戏,养成类游戏,养成游戏,经营游戏,卡牌回合,沙盒游戏,竞技卡牌,暴雪游戏,卡牌收集,防御游戏,穿越游戏,少女养成,日系游戏,有戏,游戏商城,桌游卡牌,军队塔防,远古战争,澄海3C,部落塔防游戏,独立战争,原始战争,兄弟战争,女神养成,全球免费,本周免费,游戏果粉,塔牌,微博游戏,塔防无双,插卡游戏,空间游戏,休息游戏,流星蝴蝶剑,挂机,梦幻西游单机版,单机游戏角色,单机武侠,搜索游戏,声优游戏,搞怪游戏,奇幻塔防,女人,女生,死神,最囧游戏,逃离公司,神秘海域4,僵尸尖叫,暗黑游戏,地狱边境,神秘海域,暗黑游戏边境之旅,末日生存,死神来了,声控游戏,惨无人道,鬼游戏,推理游戏,暗黑3,探险游戏,生存类游戏,暗黑单机,澳大利亚,痛苦地狱,人格分裂,拾荒,惊悚乐园,暗黑崛起,暗黑三,史上最牛,唯美游戏,趣味游戏,暗黑大陆,待机游戏,斗鱼直播,虎牙直播,非人学园,光荣使命,激情影院,拳王,跑步游戏,午夜直播,steam令牌,同城游戏,吃雞,智利游戏,初夜,亲朋游戏,无网游戏,连机游戏,基站,江湖风云,正版游戏,王者之心,联众游戏,赌博游戏,天使会,不夜城,命运之塔,堡垒子夜,王者农药,激情男女,吉祥游戏,激情恋爱,重生游戏,黑夜战机,深夜快播,一元游戏,更新游戏,通讯游戏,现实免费,激情交友,社区游戏,微游戏,小说,三国志单机,梦三国,黄色小说,滕讯游戏,貂蝉别跑,神马三国,金庸群侠传,阿瓦隆,单机武侠,跑步游戏,金庸武侠,意大利游戏,抖机灵游戏,死肥宅游戏,双点医院,浮渣,東周列萌志,煮糊了,地狱之刃：塞娜的献祭,韦诺之战,13号星期五:杀手谜题,空甲战争：进攻,战舰世界,家有大貓,战争仪式,裂痕,人类一败涂地,实验室,搬运鼠,永恒之夏,枪炮世界,火药瘾君子,战争雷霆,小缇娜的龙堡之袭,丧尸恐慌,九、CS:GO,H1Z1:生死挣扎,求生之路2,GTA5,英雄萨姆Fusion 2017(beta),逃生,传送门2,影子武士,辐射4,国土防线,巫师3:狂猎,王国:经典,英雄连2,层层恐惧,腐蚀(Rust),饥荒:联机版,盖瑞模组,杀戮空间,星露谷物语,传送门,调查局:幽浮解密,行尸走肉,叛变,方舟:生存进化,漫漫长夜,茶杯头,海市蜃楼:秘密战争,神界:原罪2,基佬大乱斗,火柴人战斗,史莱姆牧场,黑色沙漠OL,COD14:二战,幽灵行动:荒野,亲爱的艾丝特：里程碑版,空洞骑士,战锤40K:永恒远征,中土世界:战争之影,尼尔:机械纪元,流放者柯南,传送门骑士,战锤:全面战争2,死亡细胞,乐高世界,缺氧,掠食,油管主播的生活,星球采矿者,反恐精英:起源,反恐精英:零战行动,半条命2,DOTA2,彩虹六号:围攻,武装突袭3,黑暗之魂3,荣耀战魂,尼尔:机械纪元,上古卷轴OL:无限的泰姆瑞尔,欧洲卡车模拟2,过山车之星,狙击精英4,黎明杀机,军团要塞2,XCOM2,战争雷霆,流放者柯南,城市:天际线,生化危机7,RUST,收获日2,战斗砖块剧场,文明5,文明6,全境封锁,城堡破坏者,植物大战僵尸:年度版,Beholder,黑道圣徒4,没有人知道的大冒险,地狱潜者,上帝之城1:监狱帝国,地铁2033,地铁:最后的曙光,黑道圣徒2,猎天使魔女,星际编年史:Delta像限,杀手5:赦免,水下之旅,Merger 3D,机械制造:重生,心灵杀手:美国噩梦,双子星座2,地下城2,红色管弦乐队2,命运之手,奇异领域,晶体管,胜利之日:起源,行尸走肉,热血无赖:终极版,命运石之门,竖持战斗,宅男的幻想,猎人:野性的呼唤,暗黑地牢,幽闭圣地2,杀手已死:噩梦般,野兽传奇,三国:经典,层层恐惧原生,调查局:幽浮解密,拜金女孩,恶灵附身2,仁王:完全版,NBA,狙击精英4,和班尼特福迪一起攻克难关,黑暗与光明,Will:美好世界,篱笆庄秘闻,红石遗迹,光明重影,且听琴语,恶魔迷宫,拉比哩比,侠客风云传, 文明6,天国拯救,战争黎明3,三国志13PK,光环战争2,狙击精英4,新高达破坏者,真三国无双8,全战：不列颠王座,中土世界战争之影,战锤：末世鼠疫2,命运2,突袭4,军团1944,星战前线2,诺曼底44,荣耀战魂,信长野望大志,战场女武神4,女武神：苍蓝革命,战国无双：真田丸,战锤：全面战争2,群星,哥特舰队,战争机器4,星际争霸2,银河文明3,英雄无敌7,旗帜的传说2,纪元2205,勇敢的心世界大战,德军总部：新秩序,阿提拉：全面战争,星际战舰,幽浮2,文明：太空,泰坦陨落2,灰蛊,奇点灰烬,真三国无双7,战国BASARA4,战锤：全面战争,中土世界暗影魔多,要塞十字军东征2,剑刃风暴,太空战舰,战场女武神,家园重制版,真三英杰传,星际殖民2,战国无双4-2,星球大战前线,地球防卫军4.1,伟大时代：中世纪,家园卡拉克沙漠,三国志12,玩具士兵,荣誉勋章,骑马与砍杀,狙击精英V2,武装突袭3,鹰击长空2,皇牌空战7,全战：幕府将军2,罗马2：全面战争,拿破仑：全面战争,家园2,星际争霸,三国志10,魔兽争霸3,德军总部,帝国时代2,三国群英传7,信长之野望13,太阁立志传5,帝国：全面战争,战争机器,深海迷航,逃生2,恶灵附身2,地狱之刃,小梦魇,观察者,掠食,吸血鬼,漫漫长夜,十三号星期五,极限脱出九人游戏,灵魂筹码,报复,深夜廻,黑镜,2Dark,你好邻居,病号,无可救药,白色情人节：校园迷宫,直到黎明,夜啼,恐怖黎明,毁灭战士4,黎明杀机,太阳浩劫,白夜,层层恐惧,玩具熊五夜后宫4,谋杀：灵魂疑犯,零：濡鸦之巫女,SOMA,昏迷,血源,恶灵附身,小镇惊魂,地堡,Inside,阿拉亚,劫后余生：夺回,伊森卡特的消失,悬案：刹那惊颤光之镇,遗忘,异形：隔离,阴暗森林,森林,曙光,白化摇篮曲,畸形,沉睡之间,鬼屋魔影启蒙,心灵杀手,死光,死亡空间3,逃生,七日杀,死亡空间2,寂静岭：暴雨,失忆症：猪猡,唯一的幸存者,失忆症：黑暗后裔,半条命：恐惧之泣,死亡空间,寂静岭3,半条命2,寂静岭5：归乡,往日不再,生化危机7,行尸走肉3,腐烂国度2,丧尸围城4,恐怖僵尸之夜,行尸走肉：最终季,合金装备：幸存,海王星VS僵尸军团,行尸走肉：米琼恩,求生指南2,丧尸围城,亿万僵尸,生化危机0,死亡净化爆发,消逝的光芒：信徒,生化危机2：重置版,生化危机保护伞小队,PVZ：花园战争2,美国末日,生化危机6,DayZ,H1Z1,消逝的光芒,腐烂国度,生化危机：启示录,植物大战僵尸2,生化危机启示录2,剑勇传奇忍者龙剑传Z,节奏地牢,僵尸,丧尸围城3,七日杀,未转变者,枪血黑手党,行尸走肉：第二季,求生指南：第三人称,脱逃者：行尸走肉,僵尸部队三部曲,僵尸维京,生化危机HD,逃离死亡岛,植物大战僵尸：花园战争,行尸走肉,求生之路2,死光,丧尸围城2,死亡岛,潜行者：普里皮亚季的召唤,生化危机：浣熊市行动,求生之路,生化危机5,生化危机4,生化危机3,生化危机2,植物大战僵尸,盗贼之海,绝地求生,堡垒之夜,战神4,孤岛惊魂5,混乱特工,方舟生存进化,刺客信条起源,塞尔达：荒野之息,侏罗纪世界进化,怪物猎人：世界,杀手2,讨鬼传2,流放者柯南,波西亚时光,最终幻想15,异度之刃2,合金装备幸存,永恒之柱2,猎人：野性的呼唤,荒野大镖客救赎2,超级马里奥奥德赛杀手6,看门狗2,正当防卫3,巫师3狂猎,辐射4,羞辱2,无人深空,极限巅峰,合金装备5原爆点,合金装备5幻痛,孤岛惊魂原始杀戮,看门狗,未转变者,环世界,异星探险家,海岛大亨5,孤岛惊魂4,成长家园2,模拟山羊,疯狂的麦克斯,坎巴拉太空计划,蝙蝠侠：阿甘骑士,成长家园,超大城市,废品机械师,热血无赖,羞辱,上古卷轴5,正当防卫2,我的世界,黑道圣徒4,魔方世界,质量效应3,孤岛惊魂3,质量效应2,泰拉瑞亚,饥荒,辐射3,正当防卫,上古卷轴4,海岛大亨3,上古卷轴3,杀戮尖塔,东京迷城,九张羊皮纸,命运之手2,战神：夜袭,无夜之国2,小魔女学园,大神：绝景版,最终幻想世界,乐高漫威英雄2,奇异人生暴风前夕,柴堆,过气英雄,荒野八人组,蝙蝠侠内敌,城市帝国,方根书简,银河护卫队,追云者编年史,塞伯利亚之谜3,乐高都市卧底风云,MC：故事模式2,Rime,Hob,东京42,模拟狩猎,妖精剑士F,魔界战记2,诞生,落水狗血战日,不朽星球,牧场物语希望之光,薄樱鬼：风之章,放逐之城,万众狂欢,模拟人生4,万亿魔坏神,辐射避难所,赛马大亨8,三位一体3,模拟农场17,风语世界2：沉寂,模拟火车：新时代,魔法季节沉睡大地,火箭联盟,夏日课堂,星球基地,游戏开发者,模拟挖掘机,狂热火车,乐高蝙蝠侠3,特技摩托聚变,星球探险家,暗影之刃,麦克斯：兄弟魔咒,光之子,地狱潜者,热血进行曲,大厦管理者,进化之地2,王国英雄2,圣铠传说,无主之地传说,星露谷物语,海之号角神秘海怪,南方公园真理之杖,迷你忍者,孢子,愤怒的小鸟,模拟人生3,模拟城市5,旋转轮胎,超级食肉男孩,功夫熊猫,双星物语2,三位一体2,三位一体,命运2,战地5,极品飞车20,最终幻想15,极限竞速7,毁灭战士4,NBA 2K18,全境封锁,质量效应：仙女座,杀出重围人类分裂,镜之边缘：催化剂,羞辱2,尘埃4,黑暗之魂3,赛车计划2,量子破碎,街头霸王5,战争机器4,极品飞车19,极限竞速地平线3,古墓丽影：崛起,德军总部2新巨人,勿忘我,进化,孤岛危机3,武装突袭3,细胞分裂6,死或生5,Ryse罗马之子,彩虹六号围攻,蝙蝠侠：阿甘骑士,生化奇兵：无限,地铁：最后的曙光,飙酷车神,堕落之王,古墓丽影9,极品飞车18,正当防卫3,死亡空间3,失落的星球3,龙腾世纪审判,刺客信条：大革命,刺客信条：枭雄,合金装备崛起复仇,杀手5,尘埃3,无限试驾2,孤岛危机2,死亡空间2,暗黑血统2,极品飞车17,马克思佩恩3,蝙蝠侠：阿甘之城,巫师2：刺客之王,地铁2033,黑暗之魂,子弹风暴,神奇蜘蛛侠,细胞分裂5,杀出重围3,失落的星球2,孤岛危机,刺客信条,上古卷轴4,波斯王子3,波斯王子2,极品飞车16,镜之边缘,战争机器,细胞分裂4,极品飞车12,火爆狂飙：天堂,冰汽时代,茶杯头,逃脱者2,缺氧,终结将至,空洞骑士,盗贼之海,死亡细胞,奥日与精灵意志,热血物语地下世界,艾迪芬奇的记忆,洪潮之焰,塔科马,吃鸡模拟器,ECHO,拯救者,掘地求升,远征军：维京,方舟生存进化,佐迪亚克斯之子,尤卡大莱莉冒险,神奇小子龙之陷阱,Inside,旁观者,围攻,看火人,废品机械师,盐和避难所,这是我的战争,晶体管,星露谷物语,以撒的结合：重生,赛博朋克酒保行动,墓园,传说之下,她的故事,挺进地牢,防御阵型2,暗黑地牢,血战西部,ABZU,人类：一败涂地,美国卡车模拟,影子战术将军之刃,星球基地,见证者,脱逃者,铲子骑士,煮糊了,拳击俱乐部,60秒！,奥森弗里,石油骚动,这是警察,奥日与黑暗森林,昏迷,无人之境,猫头鹰男孩,星界边境,荒神,地堡,崩溃大陆,环世界,监狱建筑师,天空之山,以撒的结合：胎衣,地狱边境,菲斯,泰拉瑞亚,堡垒,机械迷城,请出示文件,史丹利的寓言,欧洲卡车模拟2,旅途/风之旅人,天命奇御,疯狂之冠,汐,幻,救赎之路,光明记忆,金庸群侠传5,波西亚时光,幻想三国志5,戎马丹心汉匈决战,三国志：汉末霸业,圣女战旗,红石遗迹,神舞幻想,王者荣耀,荒野行动,吞食孔明传,河洛群侠传,初体计划,英雄就是我,无名之辈,上帝之城监狱帝国,侠客前传,归家异途,侠客风云传,光荣使命,ICEY,圣女之歌零,符石守护者,仙剑奇侠传6,仙剑奇侠传5,高考恋爱100天,轩辕剑外传穹之扉,轩辕剑6,失落城堡,风卷残云,古剑奇谭2,洛川群侠传,新剑侠传奇,御天降魔传,古剑奇谭,仙剑奇侠传5前传,雨血前传：蜃楼,轩辕剑外传云之遥,轩辕剑5,三国群英6,三国群英7,风色幻想6,幻想三国4,仙剑3外传,风色幻想XX,仙剑奇侠传2,仙剑奇侠传3,仙剑奇侠传4,轩辕剑外传汉之云,轩辕剑4,三国群英5,武林立志传,风色幻想5,轩辕剑4外传：苍之涛,轩辕剑3,大富翁4,仙剑奇侠传,金庸群侠传,幻世录2,炎龙骑士团,明星三缺一,古龙群侠传,剑侠情缘2,轩辕剑3外传天之痕,古墓丽影：暗影,劳拉•克劳馥, Shadow of the Tomb Raider,太吾绘卷,刺客信条:奥德赛,刺客信条5, 刺客信条6,七人杀阵,NBA 2K19,暗影：觉醒,NARUTO TO BORUTO: SHINOBI STRIKER,消逝的光芒：仇恨,东方大战争,疯狂炼金师,国战:列国志传,灵魂筹码,三国志:汉末霸业,武侠乂,色情游戏, 独立游戏,动作游戏,冒险游戏,休闲游戏,策略游戏,模拟游戏,角色扮演游戏,Early Access游戏,抢先体验游戏,免费游戏,暴力游戏,单人游戏,大型多人在线游戏,体育游戏,血腥游戏,竞速游戏,多人游戏,好评原声音乐游戏,裸露游戏,氛围游戏,解谜游戏,二維游戏,色情内容游戏,恐怖游戏,日本动画游戏,剧情丰富游戏,奇幻游戏,困难游戏,开放世界游戏,科幻游戏,射击游戏,合作游戏,搞笑游戏,平台游戏,女主人翁游戏,画素风格游戏,第一人称射击游戏,第一人称视角游戏,电影游戏,生存游戏,欢乐游戏,回合制游戏,沙盒游戏,街机游戏,阖家游戏,怀旧游戏,在线合作游戏,视觉小说游戏,点击游戏,探索游戏,经典游戏,第三人称视角游戏,可爱游戏,悬疑惊悚游戏,丧尸游戏,太空游戏,教育游戏,重玩价值游戏,网络爆红游戏,战术游戏,单机多人游戏,黑暗游戏,清版射击游戏,悬疑游戏,快节奏游戏,类Rogue游戏,物理游戏,生存恐怖游戏,单机合作游戏,网络出版游戏,RPG制作大师游戏,鲜艳游戏,建造游戏,动作角色扮演游戏,放松游戏,步行模拟游戏,拟真游戏,即时战略游戏,工艺游戏,团队角色扮演游戏,回合制策略游戏,战争游戏,潜行游戏,动作冒险游戏,历史游戏,成人游戏,隐藏物件游戏,平台解谜游戏,玩家对战游戏,管理游戏,弹幕游戏,横向卷轴游戏,砍杀游戏,垂直卷轴游戏,自创角色游戏,格斗游戏,竞技游戏,第三人称射击游戏,恋爱模拟游戏,音乐游戏,塔防游戏,日系角色扮演游戏,末日游戏,黑暗奇幻游戏,光明会游戏,MMORPG游戏,轻度Rogue游戏,极简主义游戏,4人单机游戏,剧情游戏,未来游戏,中世纪游戏,迷宫探索游戏,二战游戏,爱情游戏,机器人游戏,带状卷轴动作游戏,团队导向游戏,赛博朋克游戏,等角游戏,魔法游戏,超现实游戏,军事游戏,建筑建造游戏,垂直捲轴射击游戏,纸牌游戏,回合制战斗游戏,自选历险体验游戏,类银河战士恶魔城游戏,跑酷游戏,卡通化游戏,多结局游戏,惊悚游戏,风格化游戏,黑色幽默游戏,驾驶游戏,永久死亡游戏,外星人游戏,犯罪游戏,3D 平台游戏,回合制战术游戏,桌游游戏,城市营造游戏,资源管理游戏,鲜血游戏,试验性游戏,经济游戏,关卡编辑游戏,飞行游戏,手绘游戏,原声音乐游戏,推理游戏,蒸汽朋克游戏,竞技场射击游戏,毁灭游戏,多人在线战术竞技游戏,互动小说游戏,大战略游戏,寻宝游戏,玩家合作游戏,卡通游戏,非主流经典游戏,火车游戏, 90 年代游戏,心理游戏,3D视觉洛夫克拉夫特式游戏,反乌托邦游戏,三消游戏,抽象游戏,恶魔游戏,文字为基础游戏, 80 年代游戏,假3D游戏,2D 格斗游戏,即时游戏,4X游戏,触控游戏,机甲世界游戏,即时含暂停游戏,分屏游戏,仅鼠标游戏,架空游戏,太空模拟游戏,重制游戏,忍者游戏,海盗游戏,节奏游戏,战术角色扮演游戏,恐龙游戏,黑色喜剧游戏,轻游戏游戏,策略角色扮演游戏,电竞游戏,龙游戏,迷幻游戏,3D游戏,暗杀游戏,少女游戏,战争游戏,单线剧情游戏,交易卡牌游戏,西部游戏,坦克游戏,科学游戏,竞分游戏,游戏工坊游戏,冷战游戏,超級英雄游戏,漫画游戏,体素游戏,剑术游戏,黑色游戏,电脑角色扮演游戏,六角格棋盘游戏,灵异游戏,合作战役游戏,记叙游戏,故事架构丰富游戏,创世神游戏,即时战术游戏,海军游戏,角色动作游戏,讽刺游戏,奔跑游戏,狩猎游戏,职业导向游戏,抢劫游戏,谐仿游戏,众筹游戏,无声主角游戏,足球/美式足球游戏,快速反应事件游戏,吸血鬼游戏,时空旅行游戏,贸易游戏,一战游戏,网格导向动作游戏,恶人主角游戏,哥德游戏,水底游戏,美国游戏,足球游戏,时间管理游戏,农业游戏,小说改编游戏,神话游戏,子弹时间游戏,武术游戏,狙击手游戏,钓鱼游戏,现代游戏,阴谋游戏,六自由度游戏,非线性游戏,逻辑游戏,唯美格斗游戏,弹球游戏,哲理游戏,异步多人游戏,时空操控游戏,限时游戏,背包俄罗斯方块游戏,体验游戏,越野游戏,星球大战游戏,资本主义游戏,采矿游戏,帆船游戏,工作场所不宜游戏,棋类游戏,Steam 主机游戏,不可思议迷宫游戏,罗马游戏,马匹游戏,蝙蝠侠游戏,轨道射击游戏,动态记叙游戏,赌博游戏,文字游戏游戏,火星游戏,外交游戏,标杆测试游戏,狼人游戏,推理调查游戏,打字游戏,篮球游戏,推箱子游戏,信仰游戏,高尔夫球游戏,地底游戏,交谈游戏,蓄意操控游戏,困难游戏,超人类主义游戏,小游戏,劳拉•克劳馥游戏,迷你高尔夫游戏,摔角游戏,保龄球游戏,旅鼠游戏,台球游戏,自行车游戏,外国游戏,拼字游戏,铁马游戏,优惠游戏,打折游戏,修仙游戏,新品游戏, 刺客信条2, Assassin's Creed 2 Deluxe Edition,黑暗之魂1,黑暗之魂2,黑暗之魂3, Sekiro: Shadows Die Twice,刺客信条4黑旗, Assassin’s Creed IV Black Flag,Assassin's Creed Syndicate,神力科莎：竞争, 勇者斗恶龙11：寻觅逝去的时光,丧尸围城,失眠方舟,失眠：方舟, 御侠客,闪乱神乐：沙滩戏水,神力科莎：竞技版,非对称性游戏,超好玩游戏,超级好玩游戏,英雄战迹,王者联盟,卡牌联盟,男性游戏,女人游戏,男人游戏,纵横天下,刺客信条5,无限法则,冰汽时代,行星控制:起源,冰城传奇1,冰城传奇2,冰城传奇3,冰城传奇4,冰城传奇5, 锈湖,方块逃脱,60秒!,重金属飞车,爱上火车,像素女孩,侠隐行录:困境疑云,海底寻宝,雨鸦,神社的百合香,夏荷,钢铁地牢,无双大蛇3, 无双大蛇1, 无双大蛇2, 无双大蛇4,鬼泣1, 鬼泣2, 鬼泣3, 鬼泣4, 鬼泣5, 荒野大镖客：救赎2, 古墓丽影暗影,NBA 2K19,漫威蜘蛛侠,新忍出击,实况足球2019,双点医院,梦道,我的英雄学院,莎木1+2,人渣,怪物猎人：世界,如龙0,侠客行,无双大蛇3,奇异人生2,FIFA 19,极限竞速地平线4,AC奥德赛,灵魂能力6,使命召唤15,河洛群侠传,暗黑血统3,战地5,荒野大镖客2,鬼泣5,最后生还者2,真三8,旗帜的传说3,勇者斗恶龙11,火爆狂飙：天堂重制版,刀剑乱舞,三国全战,鸟人战队,绝体绝命都市4,鬼灯的冷彻,约战：精灵再临,惊奇队长,正当防卫4,死神的遗言,客死文兰,生化危机2：重制版,御侠客,兽娘动物园,闪之轨迹4,恐龙快打,薄暮传说：重制版,漫威蜘蛛侠,勇者斗恶龙：建造者2,星际争霸：重制版,消逝的光芒：邪恶之血,少数幸运儿,心境,亡灵诡计,幽灵主义,只狼：影逝二度,火影忍者博人传：新忍出击,生化2重制,远星物语,,,十一、阿提拉：全面战争,暗黑地牢,艾森沃德传奇,奥森弗里,艾文殖民地,暗黑破坏神2,暗黑血统4,暗黑血统3,暗黑血统2,暗黑血统,阿加雷斯特战记2,阿加雷斯特战记,爱丽丝：疯狂回归,阿玛拉王国：惩罚,阿尼玛：回忆之门,阿达尼亚的守护者,阿克拉什：传承,暗影之剑,暗黑之门伦敦,奥妮之刃,艾云卡斯之法师的崛起,阿尔戈英雄的崛起,奥斯库拉：失去的光明,艾莉森之路,艾森霍恩：异形审判官,阿米克罗,暗影之刃：再度出击,暗影帝国,安特利亚英雄传,阿廖欣的枪,矮人,阿拉亚,阿尔戈,奥日与精灵意志,奥西里斯：新黎明,Angel,Beats!:1st,beat,阿凡达,Artifact,暗影：觉醒,B,报复,飙酷车神2,飙酷车神,迸发2,迸发,半人马之星,不义联盟：我们之中的神,蝙蝠侠：阿甘骑士,蝙蝠侠：阿甘起源,蝙蝠侠：阿甘之城,蝙蝠侠：阿甘疯人院,蝙蝠侠,蝙蝠侠：内敌,冰汽时代,波斯王子5,波斯王子4,波斯王子3,变形金刚,变形金刚：塞伯坦之战,变形金刚：塞伯坦的陨落,变形金刚：毁灭,变体少女,波西亚时光,八方旅人,不可饶恕,霸王Overlord,霸王2,霸王：邪恶联盟,孢子SPORE,贝奥武夫,半人半神,边缘战士,暴战机甲兵,半条命2,宝可梦探险寻宝,堡垒,暴力辛迪加,百战天虫,百战天虫：世界派对重制版,堡垒之夜,堡垒：火焰之炼,本影,白夜,暴行,Blue,Reflection,避难所2,不义联盟2,不朽星球,薄樱鬼：风之章,崩溃大陆,爆炸头武士2：库玛复仇,病号,百鬼城,白色情人节：校园迷宫,笔下之死,巴比伦陷落,C,刺客信条：奥德赛,刺客信条：起源,刺客信条：大革命,刺客信条：枭雄,刺客信条：叛变,刺客信条4：黑旗,彩虹六号：围攻,茶杯头,传送门骑士,柴堆,超大城市,尘埃4,城市帝国,传送门2,成长家园2,层层恐惧,城市：天际线,苍翼默示录：刻之幻影,超级房车赛：汽车运动,超级房车赛：起点,超级房车赛：起点2,城堡风暴,超凡双生,超级食肉男孩永无止境,超级机器人大战,超级机器人大战V,机战OG：月球居民,超级机器人大战X,超时空要塞,彩虹六号,炽焰帝国2,纯粹越野,彩度战队,超世纪战警,草根传奇,刺客信条：编年史,刺客信条3,刺客信条：启示录,刺客信条：兄弟会,刺客信条2,刺客信条,尘埃3,尘埃2,尘埃,尘埃拉力赛,传说之下,传奇：神之手,城市生活,沉没之城,成长家园,炽天使,冲突否定行动,超级马里奥：奥德赛,冲突世界,CLANNAD,次元转换射击,重建核心,超越善恶2,除暴战警3,CHKN,重初始化,苍龙城,吃人的女孩2,穿越林间,传说：命运之路,创世纪：阿尔法一号,纯粹农场17：模拟器,初体计划,超越人类,超自然9人组,Control,超能队长,超人：世界最佳拍档,超级街道赛,D,地狱之刃,大神：绝景版,东方帝国,地狱边境,德军总部3,德军总部：新血脉,德军总部2：新巨人,德军总部：旧血脉,德军总部：新秩序,德军总部,地牢之魂,迪士尼无限3.0,帝国时代3,帝国时代2HD,帝国时代：终极版,帝国时代4,帝国：全面战争,地牢围攻3,地牢围攻2,堕落军团,东印度公司,达尔文计划,刀剑封魔录,独行者：试验场,地铁：离去,地铁2033,地铁：最后的曙光,堕落之王2,堕落之王,大航海：纪元,弹震症2：血迹,第八分队,大富翁系列,地下城,地球帝国3,第一圣殿骑士,地牢守护者,戴斯班克,超女神信仰诺瓦露：激神黑心,地城之光,地下城3,地下城2,弹片,迪托之剑,地上战争,地狱之魂,D4：暗梦不灭,多伦塔,地球Online,地下城工会,地狱潜者,夺位者,弹丸论破,弹丸论破2,弹丸论破：绝对绝望少女,东京迷城,地穴童影,地球防卫军4.1,地球防卫军5,地平线：黎明时分,刀剑神域：夺命凶弹,刀剑神域：虚空幻界,刀剑神域：虚空断章,盗贼之海,冻结状态,大厦管理者,地堡,地球黎明,代号：硬核,底特律：变人,诞生,电竞人生,东津萌米,渎神,东京42,东京暗影,大圣归来,毒枭,对马之魂,地球陨落,东京喰种：re,CALL,to,EXIST,E,恶灵附身2,恶灵附身,二进制领域,二之国2：亡灵之国,恶魔城：暗影之王2,恶魔城：暗影之王,恶魔三人组,恶魔狩猎,ELEX,ECHO,恶魔之魂,恶霸鲁尼2,Eitr,F,方舟：生存进化,范海辛：终极剪辑版,疯狂的麦克斯,FIFA,18,FIFA,17,FIFA,16,反恐精英：全球攻势,反恐精英CS,辐射：避难所,辐射76,辐射4,辐射3,辐射新维加斯,菲斯,防御阵型2,防御阵型,复仇者联盟,疯狂之冠,孤岛惊魂5,孤岛惊魂4,孤岛惊魂3,孤岛危机3,孤岛惊魂2,孤岛危机2,孤岛危机,鬼泣5,鬼泣HD合集,DMC：鬼泣,鬼泣4：特别版,鬼泣4,鬼泣3,古墓丽影：暗影,古墓丽影：崛起,古墓丽影9,光明格斗：刀锋对决EX,观察者,过山车之星,过山车大亨世界,光之镇,钢铁之师：诺曼底44,钢铁之师2,光环战争2,光环：无限,光环6,光环5,GTA6,古剑奇谭2,GT6,鬼屋魔影：启蒙,鬼刃,鬼武者系列,古墓丽影8,古墓丽影周年,古墓丽影2：重制版,工人物语7,工人物语,冠军足球经理,哥特王朝4,哥特王朝3,GTR赛车,古剑奇谭3,古剑奇谭,格林机枪,光荣使命,光荣使命2,功夫熊猫,功夫熊猫：传奇对决,古域之战,怪物猎人：世界,怪物猎人XX,怪物猎人X,怪物猎人2,怪物猎人物语,钢铁雄心4,钢铁雄心3,GTS,GT7,鬼屋魔影,国王的恩赐,哥特舰队：阿玛达2,哥特舰队：阿玛达,钢铁侠,格兰蒂亚2,国家的崛起,光明重影,光明记忆,哥萨克3,歌利亚,新高达破坏者,高达Versus,钢铁收割,高考恋爱100天,共和国重制版,过气英雄,归家异途,归于沉寂,光之骑士,古惑狼三部曲,HI,黑暗之魂3,黑暗之魂2：原罪学者,黑暗之魂2,黑暗之魂,和班尼特福迪攻克难关,合金装备：幸存,合金装备5：幻痛,合金装备5：原爆点,合金装备崛起：复仇,合金装备4,Inside,火箭联盟,黑镜,火影：究极风暴遗产,火影：究极风暴4,火爆狂飙,海岛大亨5,海贼王：燃烧热血,海贼无双4,海贼无双3,海贼王：无尽世界R,海贼王：寻秘世界,火炬之光：前线,火炬之光2,火炬之光,灰烬,合金弹头,幻想三国志3,幻想三国志4,皇牌空战：突击地平线,皇牌空战7,毁灭战士：永恒,毁灭战士4,火影忍者系列,火影：究极风暴-革命,火影：究极风暴3,火影博人传：新忍出击,H.A.W.X.,哈利波特,海岛大亨6,海岛大亨4,海岛大亨3,荒野大镖客：救赎2,黑湾海盗,黑暗虚无,黑暗地带,海商王3,混乱军团,航母指挥官,火星战争日志,黑与白系列,鸿源战纪,红色派系：游击战,红色派系,化神降世,黑暗地带51区,横冲直撞2,灰蛊,回声战令,混血儿,幻,黑暗城堡,海之号角：神秘海怪,毁灭边缘,Hob,混乱特工,混沌之子,红心与斜线,海王星重生3,海王星重生2,海王星重生,海王星V2,海王星U,海王星VS世嘉主机少女,海王星VS僵尸军团,洪潮之焰,荒神,行会3,红石遗迹,火星求生,河洛群侠传,化妆舞会：歌与影,火焰纹章if,火焰纹章无双,火焰纹章：风花雪月,ICEY,环世界,幻想三国志5,昏迷,黑暗献祭,荒野西部Online,荒野行动,胡闹厨房2,黑暗影集：棉兰幽灵,J,绝地求生,饥荒,纪元2205,金庸群侠传5,镜之边缘：催化剂,街头霸王5,街头霸王4,街霸X铁拳,救赎之路,急难先锋2016,机械迷城,崛起3：泰坦之王,狙击精英4,狙击精英3,狙击精英V2,僵尸部队三部曲,僵尸世界大战,节奏地牢,剑风传奇无双,剑勇传奇：忍者龙剑传Z,驾驶俱乐部,寂静岭系列,僵尸必须死,吉他英雄,极品飞车21,极品飞车20,极品飞车19,极品飞车18,极品飞车17,极品飞车16,极品飞车15,极品飞车14,极品飞车13,极品飞车12,极品飞车11,极品飞车10,极品飞车9,剑侠情缘之谢云流传,教团：1886,崛起,加勒比海盗,纪元2070,纪元1800,剑与勇士,崛起2：黑暗水域,急难先锋2012,极限竞速7,极限竞速6,极限竞速5,极限竞速地平线3,极限竞速地平线2,家园：破舰者,家园：卡拉克沙漠,家园：重制版,机器人暴动,镜之边缘2,镜之边缘,极度恐慌3,Jump全明星,精灵遗产,警察10-13,极速骑行,假面骑士：巅峰战士,剑刃风暴百年战争与梦魇,见证者,剑湾传奇,进化之地2,僵尸维京,救援行动2：全职英雄,畸形,军团1944,机械巫师,绝杀99,进化,极道,僵尸,巨兽战争,极限巅峰,机甲战场,绝对迎击战争,吉娜姐妹：扭曲梦境,极限脱出3：零时困境,极限脱出：九人游戏,金庸群侠传2,寄神骑士,九张羊皮纸,巨魔与我,绝对征服,巨神狩猎,加速世界VS刀剑神域,街头大乱斗：大激战SP,精灵宝可梦皮卡丘/伊布,精灵宝可梦：究极日月,纠缠之刃,进击的巨人,进击的巨人2,Jump大乱斗,寂静之人,K,看门狗3,看门狗2,看门狗,空洞骑士,坎巴拉太空计划,看火人,狂战传说,空间逆转,恐龙猎人,狂野西部,凯撒大帝4,卡图斯：进击的机器人,狂怒Rage,狂怒2,恐怖女孩,恐怖黎明,空中冲突,恐怖僵尸之夜,骷髅与骸骨,空心弹,咖啡因,空手家2：强力一击,昆虫屠夫,凯之传奇,克林巴,Kyn,恐怖迷城,口袋妖怪,口袋妖怪：太阳/月亮,寇莎梅特：困世迷情,凯瑟琳Full,Body,恐惧狼群,L,龙珠斗士Z,龙珠：超宇宙2,龙珠：超宇宙,掠食,猎天使魔女,流放者柯南,龙腾世纪：审判,罗马2：全面战争,雷曼：起源,量子破碎,劳拉与光之守护者,劳拉和奥西里斯神庙,60秒！,雷神之锤4,黎明杀机,洛川群侠传,龙之信条,乐高世界,命运2,命运,魔兽争霸4,魔兽争霸3,盟军敢死队,毛线小精灵2,毛线小精灵,漫威VS卡普空：无限,模拟人生5,模拟人生4,模拟人生3,模拟人生2,马克思佩恩4,马克思佩恩3,马克思佩恩2,魔法门之英雄无敌3,魔法门之黑暗弥赛亚,魔法门10传承,命令与征服3,命令与征服4,迷你忍者,灭绝,魔方世界,模拟城市,魔能2,魔法对抗,魔戒之征服,美少女梦工厂,迷失地带,灭国英雄,蔑视,迷城的国度,魔法黎明,明星志愿,明星志愿4,命运战士3,模拟饭店2,迈阿密热线2：空号,魔法世界,蘑菇人：松露威胁,摩托GP,15,魔窟冒险,漫漫长夜,漫漫归家路,明日之子,免疫,木遁大师,魔界战记,墓园,模拟农场17,模拟农场18,美国卡车模拟,末日拾荒者,模拟火车：新时代,密室求生,魔法季节：沉睡的大地,迷失之魂,漫画英雄VS卡普空3,猫头鹰男孩,模拟狩猎,莫比乌斯：最终幻想,冥河：黑暗碎片,摩托英豪4,面容,迷雾侦探,墨西哥英雄大混战2,命运之手2,命运石之门0,命运石之门：精英,命运石之门,猫尾巴,牧场物语：希望之光,漫展模拟器,NO,尼尔：机械纪元,尼德霍格2,NBA,2K19,NBA,2K18,NBA,2K17,NBA,2K16,NBA,2K15,NBA,2K14,NBA,2K13,NBA,2K12,NBA,2K11,NBA,2K10,NBA,2K9,NBA,2K,欢乐竞技场2,虐杀原形,虐杀原形2,你好邻居,奴役：奥德赛西游,逆境求生,南方公园：真理之杖,南方公园：完整破碎,女神异闻录5,怒火橄榄球2,NBA,Live,06,NBA,Live,07,NBA,Live,08,NBA,Live,09,NBA,Live,14,NBA,Live,15,NBA,Live,16,NBA,Live,18,NBA,Live,19,逆光追影,尼洛,内心朋友,女巫,纳克2,Nitro+女主角梦幻格斗,南瓜先生大冒险,欧洲杯2008,欧陆风云罗马,欧洲卡车模拟2,欧洲钓鱼模拟,Overkill的行尸走肉,Once',PQ,全境封锁2,全境封锁,旁观者,缺氧,群星,旁观者,骑马与砍杀2：领主,骑马与砍杀：火与剑,骑马与砍杀,拳皇14,拳皇13,拳皇2002,奇异人生：风暴前夕,旗帜的传说3,旗帜的传说2,求生指南2,求生指南,求生指南：第三人称,权力的游戏,权力的游戏RPG,前线：战火之源,全面战争传奇：不列颠的王座,全面战争：幕府将军2,全面战争：传奇,秋之回忆8：无垢少女,秋之回忆,起源计划,群马乱斗,汽车总动员,强袭装甲,破门而入：战术小队,帕拉世界,破坏份子,叛乱：沙漠风暴,喷射霸王龙,奇妙逃亡,奇异人生2,奇异人生,奇诺冲突,奇异小队,潜行者：晴空,潜行者2,骑士：中世纪战争,喷射战士2,奇点,拳皇,拳皇97,奇异世界：新鲜可口,秦殇2,求生之路3,奇点灰烬,枪、血、黑手党,情热传说,拳击俱乐部,强制对决,七日杀,七大罪,秋叶原之旅2,秋叶原之击,欺诈之地,秋后的季节,乓丘,七：远去的日子,全面吃鸡模拟器,R,仁王2,仁王,荣誉勋章2010,荣誉勋章系列,戎马丹心-汉匈决战,忍者龙剑传2,忍者龙剑传3,如龙6,如龙5,如龙3,如龙:极2,如龙:极,如龙0,如龙:维新,荣誉代码3,R.U.S.E.,忍者之刃,忍者战记DX,忍者印记,热血进行曲：大运动会,热血物语：地下世界,忍者神龟：曼哈顿突变,Ryse：罗马之子,日落过载,人类：一败涂地,人类元素,人猿星球：最后边疆,人中北斗,瑞奇与叮当,人生尽头,瑞思和夏恩,Rime,燃烧的星,任天堂明星大乱斗特别版,S,三国志13,三国：全面战争,上古卷轴5,生化危机7,生化危机6,生化危机5,生化危机4,生化危机2重制版,生化危机,生化危机0：HD重制版,生化危机：保护伞小队,生化危机：启示录2,生化危机：启示录,生化危机：浣熊市行动,生化危机8,实况足球2019,实况足球2018,实况足球2017,天国：拯救,铁拳7,逃生2,突袭4,脱逃者2,脱逃者：行尸走肉,她的故事,泰拉瑞亚：来世,泰坦陨落3,泰坦陨落2,泰坦陨落,天空之山,塔科马,特技摩托：血龙,TUNIC,图灵测试,VA-11,HALL-A：赛博朋克酒保行动,挺进地牢,讨鬼传：极,讨鬼传2,太阁立志传5,天诛4,吞食天地,吞食孔明传,2Dark,豚鼠特工队,铁血联盟,铁血联盟：狂怒,特殊行动：一线生机,铁拳X街霸,逃离死亡岛,天使帝国4,铁路大亨3,通缉犯：命运武器,太阳帝国原罪,泰坦之旅,太空围攻,天下统一5,突袭3,太空战舰死亡之翼,泰坦尼克号：荣耀,太阳浩劫,泰坦之魂,特斯拉学徒,通灵塔,逃出生天,天命奇御,逃离塔科夫,痛苦地狱,VR网球2009,贪婪之秋,The,Cycle,W,巫师3：狂猎,我的世界,文明6,文明：太空,文明系列,无人深空,无限试驾2,无限试驾,无主之地3,无主之地：前奏,无主之地2,无主之地,无主之地传说,无主之地传说：第二季,勿忘我,无双大蛇,无双大蛇2,无双大蛇3,武装突袭3,武装突袭2,巫师2,巫师,巫师之昆特牌,乌鸦小队,无可救药,无尽空间,无尽空间2,我还活着,我的工厂,维京：神域之战,无冬之夜,王权2：幻想王国,王者荣耀,温柔刺客,武林立志传,无尽的未知,无敌9号,文明城市罗马,王国之心3,维克多弗兰,围攻,玩具士兵：战争箱子,WWE,2K19,WWE,2K18,WWE,2K17,WWE,2K16,WWE,2K15,无畏,无名之辈,我的世界故事模式,我的世界故事模式2,万智牌对决：起源,王国英雄2,旺达与巨像,伟大时代：中世纪,伍尔夫：小红帽日记,维姬拯救无声大世界,血腥竞技电台,唯一的幸存者,消失的星球,我是面包,蔚蓝,我是刹那,王国,万众狂欢,荣耀战魂,为战而生,网络奇兵：重制版,网络奇兵3,维京人：人中之狼,我，角斗士,我们，革命,玩具熊的五夜后宫,无人之境,无象之境,无夜之国,无夜之国2：新月的花嫁,万亿魔坏神,无双全明星,WILL：美好世界,舞力全开2017,无限灵魂Z,武士零,我们身边的狼：第二季,亡灵诡计,我的英雄学院,瓦尔哈拉,文嘉,我的朋友佩德罗,武侠乂,我们的回忆,无限法则,X,羞辱：界外魔之死,羞辱2,羞辱,侠客风云传前传,侠客风云传,消逝的光芒,行星边际2,仙剑奇侠传7,仙剑奇侠传6,仙剑奇侠传5前传,仙剑奇侠传5,仙剑奇侠传,行尸走肉：最终季,行尸走肉：第三季,行尸走肉,轩辕剑穹之扉,星际争霸,星际争霸：重制版,星际争霸2,信长之野望15,信长之野望：大志,信长：战国立志传,信长之野望14,信长之野望13,信长之野望12,细胞分裂7,细胞分裂6,细胞分裂5,心灵杀手,心灵杀手2,X战警前传：金刚狼,新绝代双骄3,轩辕剑汉之云,轩辕剑云之遥,轩辕剑6,轩辕剑7,轩辕剑8,虚幻竞技场3,小恶魔附体,星际殖民2,星际殖民,像素星舰,像素星际海盗,寻找天堂,星球基地,像素滑板2,兴衰文明战争,新剑侠传奇,星球大战,星球大战：旧共和国武士2,星球大战：前线,星球大战：前线2,星球大战绝地：堕落秩序,星空,消逝的光芒：信徒,消逝的光芒2,星际公民,虚拟台球4,旋转轮胎,星露谷物语,席德梅尔：星际战舰,星际爬行者,星际战甲主机版,血战西部,仙乐传说,血源,血源2,小梦魇,血污：夜之仪式,星之海洋5：忠诚与背叛,虚拟偶像：超级索尼子,限界凸骑,限界凸骑：萌情编年史,夏日课堂,象限,心境,新弹丸论破V3,星界边境,星之海洋4：最后的希望,现代启示录,汐,悬案：刹那惊颤,西娅：觉醒,小魔女学园,新冰城传奇4,新捉鬼敢死队,心魔,星之卡比：新星同盟,侠隐阁,Y,幽浮2,幽浮,影子战术：将军之刃,盐和避难所,英雄传说7,英雄传说6,英雄传说：碧之轨迹,英雄传说：闪之轨迹4,英雄传说：闪之轨迹3,英雄传说：闪之轨迹2,英雄传说：闪之轨迹,伊苏8,伊苏6,伊苏：塞尔塞塔的树海,伊苏：起源,以撒的结合：忏悔,以撒的结合：胎衣,以撒的结合：重生,永恒之柱2：死亡之火,英雄无敌8,英雄无敌7,英雄无敌6,英雄无敌5,幽灵行动4,雨血,鹰击长空2,异形大战铁血战士,英雄连,英雄连2,与狼同行,御天降魔传,亚瑟王,越狱,耶利哥,银河战士4,英雄萨姆HD,英雄萨姆3,英雄萨姆4,永远的毁灭公爵,眼镜蛇11,幽灵行动3,幽灵行动：荒野,远行星号,鹰击长空,幽闭圣地,异域镇魂曲：加强版,妖兽与人类,勇闯银河系,雨滴,淹没,遗忘,永恒边缘,永恒空间,乙金战争,银河文明3,野兽之影,银河笔与纸,勇者斗恶龙：建造者2,勇者斗恶龙8,勇者斗恶龙11,勇者斗恶龙：英雄2,勇者斗恶龙：英雄,妖精剑士F,妖精剑士F：邪神降临,亚尔斯兰战记X无双,云斯顿赛车2015,隐形公司,英雄代号Z,银河装甲,越野摩托2,伊斯巴拉,夜啼,幽灵物语,幽灵,异星奇兵,仰冲异界,油管主播的生活,夜下降生Exe：Late,亚当冒险传奇：起源,与陌生人同行,Ylands,异星探险家,游戏王：决斗者遗产,隐龙传：影踪,Yesterday,尤卡莱莉大冒险,远征军：维京,银河风暴,银河护卫队,英雄就是我,雨的世界,影子里的我,银魂,牙齿和尾巴,月影之塔,亦春秋,异度之刃2,异度之刃X,伊斯特里恩的天灾,源震：黑暗黎明,亿万僵尸,议会,原子之心,御侠客,Z,真三国无双9,真三国无双8,真三国无双7,真三国无双6,真三国无双5,真三国无双4,真三国无双：英杰传,正当防卫4,正当防卫3,正当防卫2,最终幻想15,最终幻想13,最终幻想：纷争,隻狼,中世纪2：全面战争,这是我的战争,战锤：全面战争3,战锤：全面战争2,闪之轨迹,奇异人生2,极限竞速地平线4,COD15,巫师之昆特牌：王权的陨落,幻想全明星,中国式家长,明日之后,刺激战场,王者荣耀,绝地求生,绝地求生刺激战场,吃鸡,魔晶,香肠派对,吃鸡刺激战场,暗影一直存在,斗地主,三国,第五人格,我的世界,传奇,fire balls 3d,头脑吃鸡,迷你世界,游戏,qq飞车,开心消消乐,欢乐斗地主,牛牛,消消乐,传奇私服,麻将,shadows remain,捕鱼,全军出击,阴阳师,三国杀,植物大战僵尸,梦幻西游,红警,穿越火线,nba,挂机,私服,炉石传说,皇室战争,卡牌,元气骑士,单机游戏,weaphones,球球大作战,问道,火影忍者,三国志,部落冲突,卡牌游戏,炸金花,绝地求生:全军出击,斗破苍穹,传奇游戏,荒野行动,神都夜行录,明日,风之大陆,塔防,奇迹,lanota,网易游戏,黑洞大作战,崩坏3,2048,贪玩蓝月,魔幻手游,欢乐麻将,象棋,数字华容道,jj斗地主,海贼王,棋牌,仙剑,手游,dismount,bumper,回合制手游,暗黑,三国游戏,神奇宝贝,魔域,游戏大全2018,诛仙,仙侠手游,西游,山海经,仙剑奇侠传,策略,节奏大师,俄罗斯方块,超级玛丽,变态传奇,百人牛牛,口袋妖怪,塔防游戏,梦幻模拟战,西游女儿国,仙侠,三国卡牌,传奇单机,宝宝巴士游戏大全,盗墓,非人学院,天天酷跑,英雄杀,奥特曼,五子棋,时空召唤,卡牌手游,天龙八部,网游,三国手游,大富翁,欢乐牛牛,阿拉德之怒,贪吃蛇大作战,熊猫麻将,回合,捕鱼游戏,赛车,复古传奇,神武3,shadowrocket,暗影,三国战纪,火柴人,绝地求生:刺激战场,真人炸金花,数独,剑侠情缘,三国群英传,红警ol,决战!平安京,单机,魔幻,策略游戏,汤姆猫跑酷,剑侠,策略手游,传奇世界,龙虎斗,回合制,修仙,养成游戏,传奇手游,保卫萝卜,地下城与勇士,楚留香,国美易卡,模拟人生,二次元,PAKO Forever,跑酷,红色警戒,拳皇,贪吃蛇,率土之滨,恋与制作人,足球,尼山萨满,天天爱消除,梦幻花园,奇迹暖暖,神庙逃亡,万王之王,剑与家园,消灭星星,欢乐斗牛,我叫mt4,斗地主欢乐版,极品飞车,Happy Glass,斗牛游戏,角色扮演,牛牛游戏,愤怒的小鸟,魂斗罗,飞车,放置奇兵,鬼和枪,仙剑奇侠传四,炸金花赢现金,大话西游,吃鸡游戏,滚动的天空,闲来广东麻将,植物大战僵尸3中文版,传奇挂机,西游回合,游戏大全2018免费,诛仙手游,四川麻将,连连看,骰子,挂机游戏,实况足球,stair dismount®,神秘海域4,王国纪元,恐怖奶奶,qq炫舞,梦幻诛仙,地铁跑酷,神武,传奇霸业,fireballs3d,游戏王,剑侠世界2,养成,放置,真三国无双,航海王,猎魂觉醒,跳舞的线,宫廷计,轩辕剑,蜘蛛侠,荒野求生,密室逃脱,fgo,动作游戏,流星蝴蝶剑,中国象棋,蓝月传奇,倩女幽魂,方舟,篮球,寻仙,炉石,真钱牛牛,武侠,乱世王者,钓鱼,围棋,天天象棋,捕鱼赢现金,qq斗地主,人类:一败涂地,真人牛牛,暗影：一直存在,刃心,神回避,捕鱼赢钱,回合制游戏,斗罗大陆,精灵宝可梦,坦克,私服手游,成语消消消,小游戏,福利彩票,海岛奇兵,捕鱼下分,修仙手游,雷霆战机,梦幻,宠物小精灵,梦幻家园,龙之谷,熹妃q传,武林外传,天使纪元,玩呗,全民出击,魔兽,忍者必须死3,疯狂动物城,创造与魔法,无烦恼厨房,战国,文明6,香肠派对吃鸡,三国无双,梦幻西游互通版,我的世界2,牛牛赢钱,金庸群侠传,炫舞,模拟,梦想小镇,谁是卧底,单机游戏大全免费,修仙游戏,切水果,传奇变态版,龙虎,一直存在,疯狂大厨,地下迷宫,赛车游戏,inside,逆水寒,宾果消消消,崩坏,吃鸡战场,狂野飙车8:极速凌云,角色扮演游戏,fifa,真钱炸金花,冒险岛,fireballs,西游单机版,战舰世界,卡车模拟2018,广东麻将,贪玩传奇,真实武器模拟器,飞机,絕地求生,老虎机,女神联盟2,火影,nba2k,国战手游,热血传奇,回合手游,数码宝贝,坦克世界,枪战游戏,蜀门,水果忍者,虚荣,圣斗士星矢,剑侠情缘2,生存,RDR2,地下城,三国塔防,死神,文明,御剑情缘,神秘海域,海贼王燃烧意志,真人棋牌,弓箭手大作战,碧蓝航线,一笔画完,模拟驾驶,狂野飙车,刺客信条,葫芦娃,武林,消消乐2018,画画,迷你世界 4,画中世界,麻将棋牌,卡牌回合,口袋妖怪复刻,模拟城市,梦想世界,魔域手游,野蛮时代,钢琴块2,恐龙游戏,中国式家长:亲情正版,pako,现金龙虎斗,保卫萝卜5,武侠手游,armed,平安京,腾讯麻将,微乐贵阳捉鸡,影子传说,魔力宝贝,真人龙虎斗,养成类游戏,问道手机版,金花,塔防手游,纪念碑谷,少年三国志,塔防单机,剑网3,侠客风云传,掼蛋,左轮手枪,烈火如歌,英魂之刃,欢乐炸金花,僵尸,宫廷计手游,盗墓游戏,大天使之剑,时空猎人,拳皇命运,cube escape,无敌流浪汉,阿拉德,坦克大战,刀塔传奇,gorogoa,热血江湖,泰拉契约,方舟生存,火影忍者ol,植物大战僵尸1,农场,龙虎斗游戏,扫雷,腾讯欢乐麻将,见缝插针,百人龙虎斗,madout2,诛仙游戏,街机,我叫mt,打鱼,奥特曼游戏,少女前线,三国如龙传,嘻嘻斗地主,仙侠游戏,变形金刚,rpg,射击游戏,找你妹,黑洞,月圆之夜,螺旋圆舞曲,枪械 模拟器,侠盗飞车,蓝月,我的汤姆猫,单机西游,泡泡龙,公主游戏,荒野大嫖客,挂机手游,大话西游手游,航海王燃烧意志,妖神记,忍心,战争,劲舞团,吃鸡游戏荒野行动,武动乾坤,同城游,最终幻想,街头篮球,决战平安京,古墓丽影,地球末日生存,牛牛游戏大厅,疯狂动物园,三十六计,FR LEGENDS,三国群英荟,维加斯,剑灵,猫,飞机游戏,飞行棋,鬼语迷城,全军出击刺激战场,最强nba,熊猫麻将四川麻将,现代战争,絕地求生刺激戰場,熹妃传,暖暖,滑雪大冒险,2k19,模拟器,跑跑卡丁车,太虚,真金龙虎斗,truck simulator,armed heist,寻仙手游,枪战,贪婪洞窟,自由幻想,granny,斗地主真人版,广东闲来打麻将,漫威,熊猫四川游戏,升级,战舰,奇迹mu,饥饿鲨,地下城与勇士手机版,梦幻西游手游,宫廷,机器人,动作手游,武侠游戏,汽车游戏,仙灵觉醒,圣斗士,勇士守护者,台球,天龙八部手游,部落,魔幻游戏,军旗,真实武器模拟,旋转轮胎,跑得快,ar游戏,腾讯桌球,琼崖海南麻将,经营,人类一败涂地,变态传奇私服,双人游戏,生存游戏,单机斗地主,潮人篮球,三国策略,数字传奇,gta5,鳄鱼洗澡,兔子复仇记,恐龙快打,五五花小牛,赛尔号,成语消消乐,足球游戏,逃跑吧少年,辐射 避难所,无限法则,西游记游戏,我的安吉拉,双扣,麻将来了,造梦西游,现金炸金花,qq麻将,非人学园,百人炸金花,三国志大战,植物大战僵尸3,欧洲卡车模拟2中文版,狙击,成语,轩辕传奇,部落战魂,热血传说,蜘蛛纸牌,阿瑞斯病毒,票房大卖王,方舟指令,一笔画,全民主公2,合金弹头,西游变态版,中国福利彩票,开罗,守望先锋,决地求生,分手回避,旅行青蛙,水果机,末日,三国战记,无尽之剑,植物大战僵尸2,spinner.io,三国卡牌手游,香肠,口袋联盟,蛇蛇争霸,节奏大师2,鲨鱼,拳皇97,moba,欢乐升级,2k,射击,遇见逆水寒,回合制网游,暗影格斗,沙巴克传奇,云裳羽衣,江湖,跳一跳,恐怖老奶奶,刺激战场,全军出击,剑侠世界,神都,格斗,纸片大作战2,真实滑板,二次元卡牌,堡垒之夜吃鸡,征途,Fire Balls3D,qq农场,模拟经营,王国保卫战,经营游戏,益智游戏,养成类,侠盗飞车:罪恶都市,斗破苍穹手游,腾讯广东麻将,赤月,休闲游戏,一零计划,飞车游戏,明日以后,小猪佩奇,火柴人绳索英雄,使命召唤,传奇1.76,忍者必须死,prepare for impact,黑洞大作战2,怪物猎人,物理弹球,神奇宝贝口袋妖怪,天天炫斗,做饭游戏,shadowsremain,猎魂师,盗墓手游,一品官老爷,shadows,陕西地电网上营业厅,色情游戏,rpg游戏,，我的世界3,kingdom rush,漂移风暴,飞机大亨,合击沙城,饥饿龙,终结者,倩女幽魂手游,镇魔曲,国际象棋,你胖你先吃,王权,辐射,择天记,原始传奇,围城大作战,火焰纹章,你演我猜,荒岛求生,铁血大业,真钱棋牌,飞机大战,生死狙击,tencent mobile games,战塔英雄,免费游戏,水果,决斗之城,最囧游戏,侍魂,够级,海滨消消乐,不思议迷宫,天天富翁,龙虎棋牌,超级玛丽经典版,jj斗地主赢话费,赤潮,消灭糖果,恐怖游戏,修真,未来特工,桌球,餐厅,征途2,永不言弃,至尊龙城,黄金矿工,封神单机版,化妆游戏,贵阳捉鸡麻将,别踩白块,天天飞车,快乐玻璃杯,捕鱼来了,奥特曼格斗进化3,千炮捕鱼,打枪游戏,剑侠情缘3,儿童游戏免费3岁-6岁,属性与生活,塔防三国志,乐高,放置江湖,腾讯斗地主,末日生存,王牌战争,美食烹饪家,贪玩蓝月手游,3d游戏,遮天传说,模拟山羊,二次元游戏,保皇,后宫游戏,终结者2:审判日,斗地主单机版,卡通农场,卡车模拟,单机麻将,战舰世界闪击战,球球,全民枪战,马里奥,热血永恒,钓鱼游戏,换装,金花牛牛,音乐游戏,象棋单机版,帝国时代,仙侠回合,龙骑战纪,孤胆车神,丧尸,微乐麻将游戏,斗地主赢现金,瘟疫公司,fire,天天斗地主,贪玩,植物大战僵尸单机版,铠甲勇士,找茬,上海麻将,三国杀名将传,你好.邻居,nba 2k19,阿拉德之怒手游,未来之战,麻将游戏,机器人大战,大话西游2,神庙逃亡 5,黑暗料理王,ball blast!,三国志单机,约会大作战,paper.io 2,愤怒的小鸟2,糖果传奇,混沌与秩序,tom猫,边境之旅,诛天决,荒野大作战,蜘蛛侠游戏,nba live,总裁,妈妈把我的游戏藏起来了,现代战争5,fill,烹饪发烧友,三国演义,荒野,福彩,madout2 bco,欢乐碰碰球,想不想修真,暗影格斗3,军棋,聚义三国,拼图游戏,仙灵幻梦,the room,途游斗地主,消除,小冰冰传奇,格斗游戏,侠盗猎车手,小鳄鱼爱洗澡,模拟枪械,闲来,电玩棋牌,足球经理,求生,泰拉瑞亚,弹弹堂,shadow remain,比特小队,fifa online 4,武林群侠传,八分音符酱,塔防类游戏,全民主公,红警ol手游,节奏狂欢,地狱边境,滑板,街篮,废土行动,迷你世界吃鸡,生存日记,切西瓜,石器时代,摇骰子,拳皇97单机游戏,放开那三国,地牢猎手,bacon,魔灵召唤,不就,弓箭手们,武器模拟器,忍者,滚动大作战,角色扮演手游,魂斗罗归来,蛇蛇大作战,元气冲冲冲,小游戏大全免费,魔方,密室,大鱼吃小鱼,仙剑情缘,哈灵麻将,selfcare,抖音游戏,正当防卫3,求求大作战,烹饪,mt,炸金花提现,开车游戏,装扮少女,小小英雄,gameloft,第五人格游戏,心悦麻将,梦幻西游单机版,俄罗斯方块经典,街头霸王,四川熊猫麻将血战到底,跑胡子,医院,枪,卡牌养成,街机捕鱼,我在大清当皇帝,刀剑神域,约战,攻城掠地,亡命时速,迷失岛,左轮,全面战争,经营类游戏,十三水,trucksimulator,女神联盟,永恒纪元,吞食天地,jj,光明大陆,麻将单机版,英雄无敌,fit,麻友圈2贵阳捉鸡麻将,Pastel Girl,自由之战,花仙道,Pen Run,吉祥麻将,战国之道,可口的披萨,跳棋,热血之刃,变态私服,砸金花,大话骰,多乐够级,明日之,炸金花真人版,艾诺迪亚,模拟飞行,化身博士,君王,闲来贵州麻将,卡车,parade,火车游戏,小小三国,砖块消消消,tenkyu,史上最坑爹的游戏,真实赛车3,街机游戏厅合集,火柴人联盟,御龙在天,火柴人战争,策略三国,pick the gold,祖玛,生化危机,coc,cooking fever,百人游戏,斗地主赢话费,patchmania,叫我万岁爷,坦克风云,奇迹觉醒,影之诗,武汉麻将,问道私服,玩呗斗牌,燃烧意志,罪恶都市,干瞪眼,萝卜,大主宰,公主,cube,四人斗地主,厨房游戏,三国杀online,infinite flight,碰碰车大作战,烈火,登山赛车,斗兽棋,魔域手机版,万象物语,列王的纷争,逍遥决,smart shapes,捕鱼提现,熊出没,乐高游戏,网球,打鱼游戏,提现斗牛,扑克,太古神王,全民突击,忍着必须死3,汤姆猫快跑,五子棋腾讯版,光荣使命,钓鱼王者,后宫,半世界之旅,宾果消消乐,篮球游戏,小镇,僵尸前线4,bumper.io,食堂故事,实况,安吉拉,汤姆猫水上乐园,世界,羽毛球,纸牌,长生印,汽车模拟,高达,恋爱游戏,minecraft,三国群英传单机版,少女,聚星部落,全职旅团,新诛仙,野蛮人大作战,城市,奥特曼传奇英雄,热血传奇私服,单机武侠,四国军棋,福利彩票官方,狂野飙车8,求生之路,我的世界枪战,宫廷游戏,roblox,逃离公司,dancing line,商店英雄,g5,流言侦探,温州茶苑,战火与秩序,拖拉机,锈湖,国战策略,纪念碑谷免费,猪猪侠,cats,stair,换装游戏,真人斗地主,FIFA足球世界,部落冲突:皇室战争,脑点子,全民超神,漂移,剑网三,放开那三国2,星星消消乐,宝宝学英语,波克城市,voodoo,恐怖修女,红色警戒2共和国之辉,奇异人生,汉家江湖,弹球,龙城霸业,恐怖,极速逃亡,欢乐捕鱼,大作战,元气,掘地求生,candy crush,熹妃,战争游戏,割绳子,大吉大利晚上吃鸡,女友,死亡左轮,波克捕鱼,wwe,生化危城,上篮,欢乐斗地主2018,提现牛牛,山海异闻录,my cafe,热血沙城,火柴人大乱斗,披萨,像素,传世,光之旅团,热血屠龙,钢琴块,微乐长春麻将,我的便利店,八闽福建麻将,真实赛车,决战,战地,多乐保皇,fate,开心躲猫猫,海盗奇兵,数独游戏,碰碰大作战,300大作战,跳舞的线2,芭比娃娃,消消乐免费,鳄鱼小顽皮爱洗澡,雷电,修真大时代,nba篮球大师,微乐江西棋牌,漫威未来之战,秘密花园,欢乐,仙剑奇侠传4,龙虎游戏,葫芦娃超级玛丽,虫虫大作战,神奇宝贝游戏,空战,狙击手,三国志经典,精灵宝可梦游戏,97拳皇格斗,qq斗地主欢乐版,喵星大作战,小米枪战,gta5手机版,古代游戏,冒险游戏,三带一对,蜀山,妖精的尾巴,地平线,ingress,1010,crash out,暗黑游戏,斗地主欢乐版-欢乐真人斗地主,皮皮跑胡子,单机rpg,撞头赛车,烈焰,三国单机,qq象棋,西游记,猫和老鼠,数字,恐龙世界,火柴人蜘蛛侠英雄,极品芝麻官,机器人游戏,last day on earth,方块,世界征服者,裁决,王牌大作战,哈狗,迷失森林,女生游戏,仙剑奇侠传单机,英雄,实况足球2019,csr2,迷宫,美女游戏,滑雪,封神,九品小县令,秦时明月,飞人学院,皮皮麻将,腾讯围棋,塔防游戏单机版,钢铁侠,过山车,街机游戏,天下,万王之王3D,俄罗斯方块2018新版,贪玩游戏,少年西游记,魔域口袋版,萝卜保卫战,坦克世界闪电战,皇冠博彩,merge dragons!,牧场物语,铁头英雄,侠盗猎车手:罪恶都市中文版,欢乐球球,木筏生存,劲舞团手机版,皇帝,mini 世界,rusty lake,餐厅经营游戏,跑酷游戏,涂色,手枪,township,麻将胡了,小小噩梦,破晓之刃,florence,烧脑游戏,聚会玩,脑力吃鸡,大连地铁e出行,百人斗牛,食之契约,小米超神,海贼,开罗游戏,大家来找茬,你好邻居,欢喜斗地主,梦幻西游口袋版,连连看经典版,聚义,问剑,龙珠激斗,消消,杀手,围棋入门,极速逃亡3,迷你世界2,拼三张,皮卡丘,宫斗,tower,终结者2,球,摩托车游戏,公主化妆,重装坦克,神兽金刚,fc,当官,二次元手游,勇闯死人谷,长春麻将,英雄之刃,家园,保卫萝卜3,枪火战神,闲来麻将-湖南,英雄枪战,糖果消消乐,dnf手游,花园,project off-road,敢达争锋对决,酷跑小游戏,red dead redemption 2,羽毛球高高手,spinner,捕鱼赢话费,5v5,街霸,拳皇98,f1,越野工程,节奏,卡丁车,全民农场,jj比赛,航海王：燃烧意志,非人,战舰联盟,时空猎人2,电击文库,霸道总裁,奔跑吧少年,小黄人,大掌门,1024,消消庄园,飞机模拟器,闪趣,泰坦之旅,简单火箭,杭州麻将,十三张,球球跳到底,传送门骑士,狙击游戏,中超风云2,斗牛赢现金,长生劫,你比我猜,乱斗西游,gba模拟器,勇敢的心,怪兽消消消,汤姆,三国群英,微乐捉鸡麻将,僵尸榨汁机,忍者神龟,征途2手游,开车,麻将游戏真人,冰果消消乐,俄罗斯,神回避3,幽灵行动:荒野,禧妃q传,绝地枪战,口袋妖怪日月,火影忍者究极风暴4,车游戏,星际争霸,卡五星,火炬之光,找不同,truck,中国福利彩票app,萨满,果汁四溅2,叶罗丽精灵梦,炸弹人,游戏大厅,怪物弹珠,湖南休闲游戏,轩辕剑online,八分音符,超凡蜘蛛侠,像素枪战,现代战争6,魔法时代,福州麻将,桃花源记,卡牌游戏大全,贪吃小怪物,汤姆猫的摩托艇,大唐无双,血战到底,，我的世界2中文版,soul knight,宝可梦,乒乓球,24点,变形金刚游戏,clawbert,三国志2017,赛车游戏免费 真实赛车 跑车 飞车 狂野飙车 体验 竞赛,艾希,极品飞车20,eve,超级粘液模拟器,勇闯死人谷2,象棋联网,海岛,流浪汉,打枪,侏罗纪世界,模拟人生畅玩版,扎金花,崩坏学院2,坦克游戏,保护气球,数学华容道,农场游戏,众多回忆的食堂故事,火柴人蜘蛛侠,节奏大爆炸,联机游戏,西游外传,曹操传,mc,fc模拟器,祖马,deemo,我要翘课,召唤与合成,真人斗牛,篮球大师,重装机兵,物语,泡泡,提现斗地主,三国塔防游戏,闲来陕西麻将,红蓝大作战,僵尸尖叫,21点,魔法仙灵,无尽神域,道友请留步,浴血长空,魔幻粒子,猎人,机械迷城,暴力摩托,挖掘机,昆特牌,深海水族馆,模拟恋爱,《堡垒之夜》,粉彩女孩,骰子摇一摇,绝地求生。刺激战场,三国回合,三国大冒险,纪念碑谷2免费,攻城游戏,皇上,仙境传说,魔域来了,权利的游戏,单机游戏角色,60秒,电玩,挖矿,bathroom break!,sniper 3d,芭比娃娃化妆,克鲁赛德战记,斗破,cytus,末日之后,狂野飙车8:极速凌云破解版,抢庄牛牛,欢乐五子棋,饥饿鲨进化,虚拟人生,火线精英,小精灵,苍穹传,twistyroad,全军,into the dead 2,战舰少女,女神,uno,乐乐安徽麻将,suck,山海经异闻录,神武3手游,中国象棋腾讯,黑暗荒野,捕鱼电玩,真钱游戏,贵州麻将,手游大全,weaphones2,巴清传,恋爱球球,网易棋牌,狙击行动,愤怒的小鸟中文版,simcity,奇迹私服,经典三国,真钱斗地主,水果连连看,推币机,崩坏学园,九阴真经,猎鹿人,红警2共和国之辉,天启之路,超级三国志,海底大猎杀,我的咖啡厅,war robots,微乐贵阳捉鸡麻将,边锋游戏大厅,越野,大富豪,兔子,魂斗罗单机版,爱消除,奇葩战斗家,牧羊人之心,机械模拟器,屠龙传奇,仙灵,鳄鱼,sky,蝙蝠侠,麻将好友房,官道奇才,爆破少女,妖怪正传,永远的7日之都,冠军电竞经理,百家乐赌场,魔域私服,全职猎人,不良人,黄金岛,鲨鱼游戏,解密,温州麻将,弓箭手,香肠派对绝地求生,公主游戏 女生游戏,模拟游戏,僵尸游戏,世界战争,真钱斗牛,蜀门手游,解谜,街机模拟器,美人鱼,碰碰球,双截龙,博雅斗地主,二战,传奇世界3d,朕的江山,德州扑克国际版,汤姆猫游戏,打砖块,战棋,数字填色,drift legends,腾讯象棋,奥特曼打怪兽游戏,鬼泣4,欧洲卡车,枪支模拟器,刺激戰場,don't starve,消除者联盟,电竞经理,青云诀,slidey,我是mt,lego,碰撞大作战,牛牛赢现金,官,小小突击队,爱奇艺斗地主,公路骑手,成语接龙,射箭,魔界塔,荒野行动吃鸡,吃雞,百家乐平台,熟客温州麻将,rdr2: companion,玩不停,一品包青天,避难所,三国挂机,水果消消乐,啪啪三国,全民奇迹,保卫萝卜2,奔跑吧吕布,密室逃脱:100个房间,吃鸡大作战,捕鱼大作战,战地1,萌幻三国,大富翁9,放置类游戏,鱼,高尔夫,钓鱼发烧友,跑的快,糖果,末日血战,青云情缘,升级拖拉机,官居一品,总裁游戏,皇家守卫军,水浒q传,敢达,停车游戏,竹鼠,提现棋牌,真金游戏,宫廷手游,暗黑奇迹,金庸群侠传x,笑傲江湖,机甲,大厨,2048六角,孤胆车神:维加斯,地球末日,星舰帝国,驾驶,拳击,蜀山风云传,一败涂地,绝地求生全军出击,暗黑觉醒,小镇物语,飞机模拟,航海,医生游戏,洋果子店,real drift,新三国杀,weaphone,梦三国手游,日本动漫,射雕英雄传,双人游戏大全,絕地,fire balls,青鬼,复仇者联盟,反恐精英,刺客,不义联盟,守望阿拉德,杀戮尖塔,gta5侠盗飞车,使命召唤现代战争,枪战游戏大全,长沙麻将,明星三缺一,打仗游戏,影之刃,奶奶,多微,红桃棋牌,决斗之城-游戏王,蜘蛛侠英雄,梦想城镇,桂林字牌,大话西游口袋版,陕西麻将,星际,木筏求生,赤色要塞,芭比公主游戏,求合体,智力游戏,暗黑破坏神手游,果果娱乐,奇幻仙侠,新剑侠情缘,三国无双单机,手枪模拟器,同城跑胡子,天黑请闭眼,死神vs火影,欧洲卡车模拟,植物大战,恐怖爷爷,五子棋-双人对战版,真金牛牛,土豪金闲云阁,枪械,拳王,欢乐玻璃杯,球跳塔,哈狗游戏,越野车模拟驾驶,knot fun,天刀,切水果游戏免费,昭和杂货店,奇迹之剑,行尸走肉,神仙道,火拼双扣,开心农场,国风,零境交错,九天神剑,hello neighbor,仙桃晃晃,九州天空城,滑雪大冒险3,蜀山剑侠,赛车游戏大全,填字游戏,坑爹游戏,莽荒纪元,fr,棋牌app,口袋妖怪单机版,红中麻将,qq炫舞手机版,麻将连连看,盗墓笔记手游,时空,成人游戏,gba,刀剑大作战,三国无双神将,蜀山传,放开那三国3,棋牌游戏平台,just dance,骑士,消除星星,暗黑3,庄园,大话,南京麻将,鬼点灯,一亿小目标,火枪纪元,三国志列传,魔女之泉,舞力全开,飞行,雷霆战机2,边锋,血流成河,水浒传,刀塔,脑力大乱斗,变态传世,变态西游,哥哥斗地主,jj游戏大厅,网络游戏,火柴人游戏,永恒战士,梭哈,帝国,少女游戏,我的世界。,滚蛋吧负能量,梦幻捉妖记,飞刀挑战,仙魔录,玩具大乱斗,real racing3,暗黑破坏神单机,病毒,海岛奇兵2,卡牌对战,冰雪奇缘,飘逸风暴,超级玛丽 马里奥兄弟,官人我要,欢乐球吃球,圣墟,fate grand order,超级马里奥,筛子,战场,孤单车神,僵尸大战,中心医院,pay day crime war,孤岛先锋,肥皂大作战,地下城堡2,战盟,塔防类,古墓丽影9,魔法禁书目录,攻城,巴啦啦小魔仙,公交车游戏,popstar,龙穴战争,守护你前行,信任的进化,围墙大作战,神奇宝贝单机版,怪兽大作战,巅峰战舰,temple run,主题医院,carx,动物园,shoujo city 3d,，我的世界,三国杀名将,画画游戏-儿童涂鸦涂色画画板,回合制卡牌手游,炸金花游戏,红色警戒手机版,史莱姆,黑暗传说,我是市长,热血足球,波克斗地主,小小军团,penrun,牌师,斗地主赢真钱,神秘之城,宫,疾风之刃,爱丽丝,极限竞速,初音,rpg单机游戏,太古传说,实况王者集结,炸金花赢钱,战争模拟器,猪来了,权力的游戏,萌龙大乱斗,植物大战僵尸1免费,霸王的大陆,昭和,方块消除,声控游戏,九州,300英雄,三国志名将传,爆炒江湖,第六天魔王,贪吃蛇大作战2,战舰猎手,飙车,游戏茶苑,填色,功夫熊猫,六发左轮,逐鹿大秦,getting over it,苍之纪元,tap titans 2,机械迷宫,爆裂飞车,海贼王手游,保卫萝卜4,叶罗丽精灵梦游戏,魔法门,赚钱游戏,水浒,欧陆战争,七星湖南棋牌,风流小县令,死神激斗,龙腾传世,paradox,烈焰屠龙,碰碰车,熊大熊二,沙盒,弹珠,小鳄鱼,买房记,決地求生,贵阳微乐抓鸡麻将,qq华夏,求生之王,世界末日生存,聚会游戏,狂野,游戏厅,星星,战神,口袋妖怪绿宝石,三国杀单机,答题吃鸡,knife hit,赢钱棋牌,九品,eternium,疯狂的球球,旋转轮胎免费,全民斗地主,飞行模拟器,飞刀,点击,万智牌,sniper,逍遥仙路,拆散情侣大作战,，我的世界中文版,饥饿鲨:世界,消灭星星经典版,cf手游,炫舞浪漫爱,拳皇97风云再起,四人斗地主两副牌,纪念碑谷2,乐高城市,总裁创世纪,初音未来:梦幻歌姬,神将三国,qq牧场,糖糖,打大a,战争雷霆,对对碰,吉林麻将,动物,冒险,丧尸围城,hole.io,神都夜行,斗兽战棋,游戏王决斗之城,炫舞手游,极无双,梦间集,恐龙快打街机游戏,侠盗猎车5,沙巴克,天龙八部3d手游,蜘蛛侠2,烹饪游戏,热门游戏,我叫mt2,小花仙,别踩白块儿,几何冲刺,侠盗,仙侠世界,td,oppa doll,九品小县令2,dream walker,约战精灵再临,守卫塔防,传奇私服1.76,阿拉德之怒:觉醒,街机三国战纪,炸金花app,战就战,不朽凡人,sky force,doodle jump,逃脱,牌九,暖暖环游世界,地牢,围棋游戏,cat,山西移动和生活,天乩之白蛇传说,car vs cops,helix jump,贪吃蛇大作战2018,三国战纪风云再起,子弹力量,真金炸金花,湖南跑胡子,街机游戏模拟器,刀剑乱舞,黑白钢琴块儿,战机,世界ol,jump,happy,csr,2468,奶奶恐怖游戏,砖块破坏者,你世界二,汤姆猫战营,奇迹单机版,真龙霸业,playdead's inside,大掌门2,亲朋棋牌游戏,真金斗牛,宠物小精灵单机版,黎明杀机,我的英雄学院,神奇宝贝复刻,小游戏单机经典,警车游戏,解密游戏,自行车,票房,猪猪侠游戏,新仙剑奇侠传,恋舞ol,动物游戏,凡仙,仙剑奇侠,三国诸葛,传奇私服复古,战国志,名将传,神回避2,潮汕麻将,bingo消消乐,作妖记,龙城,真钱捕鱼,青云,农场世界,铠甲勇士游戏,蛇,鲨鱼吃人,策略塔防,贪食蛇,警察抓小偷,莽荒纪,玛丽,炸弹超人,模拟器游戏,崩坏学院,四川麻将血战到底,决斗,修仙掌门人,枫色幻想,金花娱乐,羞羞的铁棒,层叠消融,儿童游戏6-8岁,漫威蜘蛛侠,少年主宰,帝国时代单机版,正当防卫,钓鱼看漂,91y,极品飞车最高通缉,足球大师,比鸡,命运之光,小小三国2,信富优贷,堡垒之夜手游,侠客风云传online,homescapes,网游游戏大全,射击游戏大全单机,九九万州麻将,真三国战,steppy pants,table tennis,霸业,未上锁的房间,开车模拟器,三张,铁拳,象棋大师,猜成语,小公主,封神榜,厨师,kingdom,商场教父,阴阳师决战平安京,无限修仙,战争与文明,超进化物语,山西扣点点,真金斗地主,bullet force,圈圈大作战,放置游戏,ro,庇护所,海战游戏,神庙逃亡2,火箭,斯诺克,打麻将,勇者斗恶龙,二人麻将,公花金三真,侍魂胧月传说,克朗代克大冒险,嘣战纪,植物大战僵尸1中文版免费,oxenfree,一起来飞车,海盗来了,坦克大作战,真实枪械模拟器,飞禽走兽,疯狂,爱养成,模拟火车,恋爱养成,头脑,太极熊猫,修女,迷你世界。,全名出击,炸金花赢钱提现,喜妃q传,九品芝麻官,秘密关系,街头霸王单机,宾果消消乐免费,跑得快腾讯,星辰奇缘,不要网的游戏,消灭星星官方正版,正常的大冒险,官场,地下城堡,西行女儿国,妖怪联盟,葫芦娃-正版授权手游,standoff 2,友乐广西麻将,英雄丹,麻友圈,三国全面战争,超脱力医院,地牢猎手6,闯关游戏,远征,越狱,美人鱼游戏,神魔,生存战争,海绵宝宝,建造游戏,卡牌类,limbo,fireball,4399小游戏,酒链世界,大天使之剑h5,碧蓝,三张炸金花,欢乐拼三张,绳索英雄,正统三国,战锤,乐清麻将,百战天虫,青蛙,火焰之纹章,找你妹3,打地鼠,2046,盛世修仙,逍遥诀,单机游戏: 单机版游戏大合集,棋牌游戏城,暴走英雄坛,抽卡人生,陕西闲来麻将,鬼吹灯手游,闲来跑得快,traffic rider,奥特曼游戏大全,守望,葫芦娃游戏,魔法拼图,现代战争4,梦幻小镇,日本游戏,北京赛车技巧,欧洲卡车模拟2018,日系角色扮演,疯狂木偶人,放置召唤师,地球灭亡前60秒!,萌宠冒险,贪玩蓝月-张家辉,末剑,汽车华容道,迷你世界迷你世界,澳门棋牌,腾讯欢乐麻将全集,霸王三国志,cooking adventure,卢石传说,电磁风暴,英雄联盟手机版,好友斗地主,斗战神,感染,对战游戏,太空,大富翁4,地主,变态,中国彩票,realcarparking2,掘地求升,官人,史诗战争模拟器,海南琼崖,流行蝴蝶剑,战争艺术,日式游戏,活下去,大菠萝,荒岛求生2,吉林棋牌,死亡岛,qq农场牧场,跳楼英雄,跑车游戏,泽诺尼亚,气球,挖掘机游戏,彩虹岛,平衡球,哈尔滨麻将,刨幺,关东煮,全民小镇,aa,画个车,爱搜互娱,尼山,暗黑猎魔,神秘海域游戏,闲来合伙人,求生刺激战场,猎人物语,多益战盟,翻滚球球,hello kitty,5v5游戏,白蛇传说,解压游戏,霸王,逃生,神庙,熊出没之熊大快跑,欢乐麻将全集,模拟农场,棋,梦想,幻影忍者,小黄人快跑,多乐,围棋练习大全,pes,ball,97,80分,左轮枪,刀锋世界,消消乐-2017正版消除游戏,罪恶都市侠盗飞车猎车手,卡牌回合手游,天天爱掼蛋,现金牛牛,跳跃战士,woody,fly hawaii,klondike,油管,牌,决战沙巴克,魔兽争霸3,途游,迷宫游戏,警车,色子,空当接龙,破解版游戏,江湖群侠传,小鸟,宫斗游戏,卡车游戏,养成经营,明日之後,真金寻宝乐园,至尊盛世单机版,快乐的玻璃杯,英魂三国,扶摇仙灵,风暴魔域,克隆战争,日系二次元,爱奇艺麻将,悠梦,九黎,航母降落,流星蝴蝶剑手游,河洛杠次,阿瓦隆之王,熊猫四川,梦幻西游互通,澳门威尼斯人,双子传说,魔神世界,腾讯五子棋,侠客,隔壁老王,nbalive,梦想三国,名将街机,刀塔传奇2,鬼泣,霸王龙,轩辕,蜘蛛侠游戏免费,猫咪游戏,狙击精英,滑板游戏,杀人游戏,扑克牌游戏,战斗机,宾果,侏罗纪,么么哒,lovelive,flywings 2018 flight simulator,幻兽归来,恐怖游戏大全,开荒纪元,全民冠军足球,数独游戏 – 最强大脑游戏大全,独自生活,红警2共和国之辉-经典红色警戒单机版,muse dash,青云决,微赢棋牌,当官游戏,我的文明,浅塘,武林外传手游,航海王强者之路,六边形消除,超级大话骰,天天棋牌,坐骑,雪鹰领主,地下城与勇士手游,阴阳,部落守卫战,造梦西游ol,超级英雄,经典游戏,湖南麻将,消防车游戏,天堂,大航海,亲朋,cooking,3d手游,斗帝传奇,花五牛来来来,醉牛斗地主,project offroad,live portrait maker,山海经异兽录,弟五人格,文明大爆炸,麻将来了-腾讯,f1 2018,poly bridge!,神域苍穹,来几局,金贝棋牌,小小梦魇,迷你世界游戏,传奇世界私服,会跳舞的线,icey,smash hit,登山赛车2,逃离方块,神途,宫心计,群侠传,天天斗地主真人版,大话西游2免费版,超市游戏,警察游戏,街机三国志,荒岛,老爹,皇冠牛牛,王国,狗狗游戏,灌篮高手,波克棋牌,死神来了,忘仙,山羊模拟器,创造世界,辉煌耀世,左轮手枪游戏,暗黑无尽之剑,动物温泉,易问,吃鸡战场刺激吃鸡游戏,金花提现,所谓侠客,远征手游,1.76复古传奇,一品大官人,象样游戏,决斗学院,infiniteflight,850棋牌,弓箭手大作战2,广东闲来,大航海之路,two dots,龙王传说,打牌网,双子,星际战甲,倩女,培根,乐高游戏大全,圆舞曲,生存进化,养成游戏单机,越野车,纸牌接龙,猜歌,牧场,涂鸦跳跃,海盗,水浒传老虎机,果宝特攻,推金币,扑鱼达人,建造,奥特曼酷跑,坚守阵地,冰火人,你说我猜,suck.io,诛仙封神录,绝地求生。,广东麻将-闲来,命悬一日,密室逃脱绝境系列,问鼎皇城,猎魂,战玲珑,如果可以回家早一点,战地5,迅雷看看-高清影视在线播放和下载,x-plane,谜题发烧友,全民吃鸡,同桌小游戏,全球警戒,梦幻西游单机,点线交织,青蛙旅行家,常来跑胡子,弹一弹,棋牌游戏大全,血流麻将,我的汉克狗,我要当皇帝,球球大作战3,life is strange,刺客信条本色,造梦西游4手机版,合战三国,植物大战僵尸破解版,魔域口袋,饥饿鲨破解版,雷曼,逃亡,连线游戏,进化,超人,赢三张,森林冰火人,忍者跳跃,同城游戏,双人,卡五星麻将,医院游戏,停车大师,保龄球,侠客行,tom,smart,三国大联盟,ultra sharp,一跳到底,奇迹塔防,三十六计手游,幸存者危城,carvscops,超物理基斗,当心身后,王者裁决,像素涂色,修仙决,传奇来了,极品飞车无限狂飙,回避,蹦坏3,麻友圈2,升官,滚球大作战,旺旺麻将,human fall flat,不良人2,reigns,kick the buddy,满贯捕鱼,idle,arena,集结号捕鱼,侠盗飞车罪恶都市,棋牌大厅,欢乐飞行棋,你比划我来猜,卡车模拟器,克鲁塞德战记,天天象棋腾讯版,跑酷游戏大全,泉州麻将,魔法,美食游戏,美女餐厅,熊大快跑,挂机西游,打飞机,小鳄鱼爱洗澡2,南通长牌,公主化妆游戏,人生,七雄争霸,kof,kairosoft,iq,300,黑月狼牙,想不想修真：凡人传说,unnie doll,.我的世界,开心玻璃杯,圣斗士星矢腾讯,新三国策,黑暗荒野2,莽荒异兽录,3D仙侠手游,嘻嘻斗地主-官方版,百人斗地主,宫廷记手游,开心跳一跳,赢钱斗地主,eweapons™ 左轮手枪模拟器,三国神将传,鳄鱼洗澡免费,僵尸炮艇,百家乐app,豪门足球风云,arcaea,闲来麻将广东麻将,三国战记单机版,双修,化妆游戏大全,滚动天空,腾讯台球,基佬大乱斗,舞,崩坏学园3,极限着陆,忍着必须死,奥特曼格斗,锄大地,解谜游戏,罗马帝国,结婚游戏,石器,烈焰手游,指尖帝国,抢滩登陆,寿司,回合游戏,三打哈,恶作剧神回避,放置骑士,乱世我为王,抱紧大根,crimaster,光之传说,魂斗罗经典,梦幻旅程,王国保卫战 前线,三国军师,途游捕鱼,英雄血战,保皇腾讯,汤姆猫酷跑游戏,波克捕鱼千炮版,山水广西麻将,烈焰龙城,魔女兵器,彩独,少年三国志2,影之刃2,守护城堡,爱惯蛋,帝国霸略,新2048,寻龙,一品,电子宠物,死亡独轮车,龙珠游戏,微乐斗地主,天堂2,进化之地,跑车,瘟疫,消除游戏,武器模拟,棒球,桥梁建筑师,字牌,女孩游戏,博雅,刀剑,儿童拼图,僵尸前线,休闲,五十k,nba游戏,亲朋游戏在线,神怒之神战,易次元,龙骑战记,鲲,3d狙击刺客,兄弟：双子传说,狙击3d刺客:射击游戏 《sniper 3d》,还有这种操作,好运南京麻将,赢真钱游戏,申博百家乐,御剑仙侠,牌乐门,异次元通讯,欢乐三张,双扣全集,奇宝斋,rise up,使命召唤12,欧陆风云,三国霸业,吞噬天地,格斗手游,角色扮演网游,光头强游戏,钢铁侠游戏,跑步游戏,蜀山传奇,直升机,猫游戏,爱掼蛋,汽车模拟驾驶,永恒,大富翁单机,保卫,三国志11,一笔画成,qq五子棋,happyglass,逆水寒手游,神秘海域失落的遗产,真实泊车2,总裁大人,九州风云录,问道单机版,百家牛牛,一零,暗影一直,穿越火线:枪战王者,墙来了,采矿大亨,我的世界中国版,长生诀,欢乐斗棋牌,变形金刚机器人,熊猫四川麻将血战到底,机器人大作战,bowmasters,坦克连,胡芦娃,hidden city,angry birds,迷你特工队,心动劲舞团,仙境传说ro,火炬之光2,花语月,音游,blackbox,大型游戏,大秦,拳皇2002风云再起,鬼游戏,叶罗丽,赌钱游戏,方块消消乐,变态版,餐厅游戏,边锋麻将,贵阳麻将,诺曼底,街机三国,螺旋,花千骨,芭比公主,联机,美味餐厅,神魔之塔,果汁四溅,射箭游戏,天下3,吕布,吃豆人,台球游戏,千变双扣,剑网,创世纪,五子连珠,七巧板,oppadoll,粘液模拟器,剑灵仙界,猜画小歌,卡车模拟器2018,螺旋跳跃,长春麻将.微乐,trapadv,上古战纪,角色扮演类,足球世界,全军突击,热血霸王,truck simulator 2018,电音超跑,福建助学,silly walks,fast track,屠龙单机,真金棋牌,腾讯麻将全集,斗罗大陆3龙王传说,你你世界,光宇游戏app,合金弹头单机版,永不言弃3,best fiends,bb弹,捕鱼游戏厅,命运冠位,谁是卧底单机,龙之谷手游,小小,斗龙战士,人类,超级玛丽单机版,枪战游戏免费,摸拟山羊,清宫q传,三国卡牌游戏,仙剑奇侠传2,雷霆,超凡蜘蛛侠2,英雄坛说,航海王启航,红蓝大作战2,竞技游戏,真三国,沈阳麻将,比手画脚,死亡扳机2,模拟枪,打僵尸,塞车游戏,仙剑奇侠转,上饶麻将,三国志曹操传,三国之刃,七龙珠游戏,mu,dc,stair dismount universal,project：offroad,神都夜行路,玻璃杯,恐怖奶奶。,矢量跑,烧脑的三国,大秦王朝争霸,龙魂战纪,热血传奇1.76,反斗联盟,flip trickster,百人龙虎,one room,网红游戏,皇室守卫,幻剑神魔,神雕侠侣2,去月球,消消乐腾讯,琼崖,mini dayz,家园7贵族,传奇单机版,英雄群侠传,滨果消消乐,泰拉,喵喵大作战,火柴人越狱,蛇蛇,弄死火柴人,天天军旗,bike race,刚琴块2,街霸5,逃出神秘宫殿,新大主宰,侠客风云,山西和教育,二八杠,小汽车游戏,不义联盟人间之神,诛仙3,qq斗地主官方,超神学院,赛车比赛,荒野求生2,猜歌名,游戏机,消防车,城堡争霸,地铁游戏,劲乐团,免费游戏大全,亡灵杀手,五子棋大师,osu,方块纸牌,鬼修女,神回避1,animal hot springs,evil nun,史莱姆模拟器,拔条毛,牛牛赚钱,王者集结,新单机西游,真金百家乐,兽人燃烧军团,香肠吃鸡,荒野求生刺激战场,2018游戏,升级:全民拖拉机,经典升级 80分,好玩的游戏大全,牛牛游戏城,够级-山东经典全民棋牌游戏,剑侠情缘2剑歌行,红桃娱乐,全球风暴,大吉大利,大神娱乐,弓箭手门,佛手在线,仙剑4,mariorun,七日之都,熊大熊二酷跑,5v5竞技,海底大作战,神奇宝贝世界,单机江湖,lost tracks,flappy bird,放置挂机,打鱼赢钱,逐鹿,蜀山剑侠传,中超风云,多牛百变方块,大天使,大逃杀,角色扮演单机,我是掼蛋王,军旗游戏,魔女之家,赌场游戏,伏魔记,风云,金庸群侠,跳跳球,赵云,罗马,糖果苏打传奇,百家乐路单,男生游戏,浪漫庄园,水族馆,我叫,弓箭,幸存者,小鸟爆破,学院,孤单车神维加斯,孢子,失落之城,大航海时代,去吧皮卡丘,卧龙吟,卧虎藏龙,倒车,保卫家园,乐彩网,中国象棋单机版,walkr,vector,slg,地狱逃脱,王权权力的游戏,悠闲箱庭！商店街,spill it!,真人炸金花游戏,电击文库:零境交错,抖音游戏大全,仙侠双修,最终王冠,全民出击刺激战场,九幺棋牌,国风仙侠,自由幻想手游,夜行录,正统江山,无厘妖妖,绝地战场,不思议棋牌,射击游戏3d狙击,慌野行动,inside免费,turbo dismount®,模拟当官,坦克世界闪击战,穿越火线吃鸡,青春篮球,小学拼音学习,荣耀棋牌,智力游戏大全,干瞪眼腾讯,97拳皇格斗单机,街机游戏大全,我的迷你世界,to the moon,神将无双,猫跑酷,烹饪冒险,红中赖子麻将,黄山麻将,小猫跑酷,三国战纪单机游戏,benghuai3,我的世界神奇宝贝版,三国志曹操,丛林大作战,vr女友,梦幻逍遥,苍穹战纪,崩坏2,cat cafe,腾讯德州扑克,io,僵尸大作战,无尽的边界,幻影猫,生存类游戏,闽南麻将,梦想家园,模拟器小霸王,感染者,死亡日记,斗罗大陆手游,gba口袋妖怪,秘密世界,一笔,水杯,新天龙八部,野蛮人,境界,画个火柴人,过山车游戏,吞食天地2,小公主苏菲亚,超级飞侠游戏,虫虫大战,模拟人生中文版,使命召唤4,车子游戏,赛车总动员,贯蛋,装扮游戏,艾诺迪亚4,舰娘,老爹汉堡店,美妙世界,皇后成长计划,玛丽奥,激流快艇,水果老虎机,横版,柯南,挖坑,挖土机,快跑,开心水族箱,建筑模拟,少儿游戏,宁波游戏大厅,孤胆枪手,孙悟空,女优,大乱斗,城市建设,地铁跑酷2,反应堆,二战风云,space,score,mmorpg,jj棋牌,gun,drift,dragon,777,pakoforever,商圈名媛,你好.邻居2,斗花金乐园牛一次,官路巅峰,决斗の城,菇菇巢穴,机器人鲨鱼,僵尸感染,冷酷灵魂,寻龙摸金,游戏大全2018单机,神秘海域3,欧陆战争6,我的世界吃鸡,魂武,抢庄牛,燃烧的意志,龙城一刀,左右棋牌,曲径通幽,代号英雄,美味的披萨,求生之日,诸葛神将,我的霸业,百人金花,soccer kick,蜘蛛侠 3,为谁而炼金,我的王朝,终极者,地主欢乐版,公主城堡,太空边界,三国名将传,畅由,龙城传奇,迪斯尼官方app,挂机类游戏,微乐鞍山麻将,攻城三国,小鳄鱼爱洗澡中文版,斗地主赢红包,芭比娃娃生宝宝,红色警戒单机游戏,车祸模拟器,嗯吃蛇大作战,sky dancer,大侠风云传,哈局十三张,self care,五子棋单机版,tom猫跑酷,give it up,新倩女幽魂,狂暴之翼,kindom rush,洛奇英雄传,公主游戏大全免费,奴隶少女,地狱边境2,魂之幻影,模拟医院,beamng,倩女幽魂2,捉妖,猪,gta5中文,剑侠奇缘,魔兽争霸,骑马与砍杀,走路,象棋残局,角色,西游释厄传,美人鱼公主,绝世唐门,纸牌游戏,符文大师,破解版,消星星,汉堡,朵拉,捉鸡麻将,愤怒小鸟,帝国时代2,帝国战争,宠物游戏,宠物养成,宝石迷阵,妖姬,奔驰宝马老虎机,奔跑吧兄弟,大亨,塞车,名将,名侦探柯南,双升,双人小游戏,单机象棋,像素游戏,侠岚,乐动达人,zombie,sims,mmo,civilization,city,510k,诛仙香蜜,三色绘恋：我们恋爱吧,unniedoll,knock balls!,御仙剑,香肠派对。,大话西游单机,太虚谣,黑洞吞噬,梦幻机场,三国:全列战争,队长小翼,烧脑策略,网易四川棋牌,五人格,不朽仙途,荒野行动全军出击,粉刷匠大作战,巨齿鲨,中国福利彩票官方,maze book: blackboard,age of magic,兵人大战,网易云游戏,云顶棋牌,葡萄积木,rpg卡牌,养成手游,贪玩蓝月传奇,泡泡龙消消乐,现金斗牛,大秦王朝,闲来广东麻将精华版,黄梅麻将,hidden folks,琼崖麻将,史小坑,老虎机下分,爱莲说,正版传奇,传世私服,求求大作战2,闲来安徽麻将,大枪游戏,csr racing 2,idle miner,hole,棋牌娱乐平台,小心身后,hungry shark,fashion empire,梦幻足球,益智游戏成人,四川游戏家园,永生劫,强者之路,江山美人,江苏快三,九州娱乐,宇宙沙盘,全民钓鱼,qq桌球,途游五子棋,冒险岛单机,经典传奇,挖到地球中心去,多乐跑得快,新三国,喜欢和你在一起,中国福彩,大型单机游戏,暗黑地牢,滚动,舞动乾坤,撞车游戏,颜色识别,幻想神域,博雅象棋,街机游戏厅,模拟枪支,黑白棋,魔塔50层,魔兽守卫军,飞镖,采蘑菇,部落战争,途游麻将,途游中国象棋,连环夺宝,赌场,血战上海滩,英雄战歌,种菜,福彩3d,矿工,生化,狂扁小朋友,涂鸦上帝,泰坦,河北麻将,武器,无限飞行,攻城略地,打屁股,恐龙游戏免费,少年,小猫游戏,小游戏大全,对战,声控,吞噬,台球帝国,古龙群侠传,古墓,单机小游戏,凡人修仙,农场小镇,全民足球,光头强,像素车,侏罗纪公园,传说,乱斗堂,万花筒,war,poker,pizza,jj麻将,evoland,delicious,boy,60,站塔英雄,二次元联盟,pk10娱乐,第五人格。,神兽超世代,xiangchangpaidui,偶遇佳人,爱转机,pongpongegg,超时空乱斗,隐藏犯罪,曼谷暴雨,猫咪公寓,旅行青蛙汉化版,天天酷跑2018,华容道数字游戏,蜀山剑侠缘,欢乐斗地主真人,欧卡2,欧卡,weap,迷雾求生,梦幻超进化,轩辕传奇-腾讯手游版,打大a-内蒙打大a,，愤怒的小鸟,神庙逃亡 绿野仙踪,箱庭都市,多乐贵阳捉鸡麻将,迷失岛2,仙侠世界2,秘境对决,qq炫舞手游,仙侠奇侠传,米你世界,crash of cars,松滋麻将,游戏机被老妈藏起来了,狙击精英4,真人金花,诸侯征战,freeroam city online,天空滚球,城堡传说,塞子摇一摇,24点游戏,英雄无敌3死亡阴影,game house,梦幻仙途,自由之战2,qq音速,harry potter,女儿国,汽车大逃杀,震东济南棋牌,我的宫廷,国王纪元,world chef,scale,腾讯欢乐斗地主,莉比小公主,恐龙游戏大全,山海,猫咪盖饭,海贼王强者之路,日系卡牌,主宰,巴士模拟,拖拉机80分,惊梦,91y游戏中心,2048六边形,世界末日,西山居,全民枪王,做饭游戏大全,快打旋风,生命线,沉默年代,游戏王决斗新世代,灵魂摆渡,天涯明月刀游戏,神武2,拳王97,登山赛车破解版,超级玛丽奥,电玩游戏厅,滑雪大冒险破解版,汽车模拟器,联机斗地主,现金斗地主,点击游戏,找不同游戏,吉祥斗地主,三国杀单机版,qq麻将血战到底,酒吧骰子,逃脱游戏,过山车大亨,跳舞游戏,角色游戏,虚拟女友,经营餐厅,神庙逃亡1,生宝宝游戏,甄嬛传,猫猫,死亡空间,武装突袭,植物大战僵尸中文版,极限摩托,极速飞车,松饼骑士,李逵劈鱼,暴力街区,时空猎人腾讯版,日式,无尽,打牌,打架游戏,打仗,愤怒的小鸟1,愚公移山,御剑,弹弹球,开飞机,奇幻射击,塞子,地下,圆桌骑士,咖啡厅,和风物语,君临天下,厦门麻将,动物模拟器,加菲猫,创造,冰淇淋游戏,保卫萝卜1,三打一,zen,wephone,warhammer,sudoku,subway,36计,碰碰车大乱斗,无烦恼,魔界骑士,封神变态版,龙卷风大作战,拍案惊奇,斗破苍穹斗帝之路,刀锋群英,天使之诫,baldi,Trade Island,换装少女,太空边界2,同桌大作战,天乩,龙魂纪元,奥特曼英雄归来,全民当官,endless frontier saga 2,姚记捕鱼,灵魂之桥,绝地求生，刺激战场,cytus2,越野泥跑者:旋转轮胎 2018,unmatched air traffic control,梦幻模拟,炸金花赢三张,卡车模拟-欧洲大卡车驾驶游戏,狂暴之翼hd-3d炫战arpg手游,鼎力三国,异兽,轮回诀,足球经理2018,我的绿洲,仙凡幻想,今晚吃鸡,留言侦探,王城无双,幻想计划,黑暗料理,五行师,mergedragons,风云传,回忆之旅,芝麻官,迷你世界3,我的恐龙,kami2,疯狂撞车王,贵州闲来捉鸡麻将,游戏藏起来了,开天,开车游戏大全,诛魔,人人快卖,汉克狗,魂之刃,冰果消消消,qq飞车手游,变形机器人,口袋川麻,江湖风云录,pixel gun 3d,僵尸漫步,热血龙城,天天打波利,腾讯斗牛,amazing frog,cooking mama,精品推荐游戏,海王捕鱼,海南麻将,三国曹操传,单机游戏大全免费角色,一拳超人,值物大战僵尸,祖马游戏,偶像梦幻祭,打方块,raft,世界3,永州跑胡子,群雄逐鹿,逍遥,关东煮店人情故事,独立游戏,镇魂曲,六边形,火影忍者手游,古剑奇谭2,战地3,赛罗奥特曼,崩坏学院3,狙击手游戏,台州麻将,极品飞车17,gat5,勇敢的心世界大战,摸拟人生,野外求生,红警单机,欧洲卡车模拟2,日系游戏,女友养成,三国群英传单机,饥饿鲨鱼,飞行游戏,风云三国,预测未来宝宝的长相,逗地主,转转麻将,足球小将,贪吃,象棋巫师,苏州麻将,航空指挥官,航空大亨,脑力达人,美国末日,红十,竞技,皇牌空战,白雪公主,疯狂喷气机,猫里奥,猜字游戏,爱丽丝快跑,煮饭游戏,烧烤,消除类游戏,河南麻将,机场,未来,暗黑黎明,明星志愿,明星养成,摩天大楼,探险,排球,挖金子,扫雷游戏,打人游戏,战舰帝国,我的汤姆猫2,我的安吉拉2,建筑游戏,妖怪,奥特曼打怪兽,喵星人大作战,史上最牛的游戏,博士的家,动作,便利店,三国群英传1,三国kill,sd敢达,rust,qq超市,qq游戏麻将,glass,fc游戏,f18,escape,candy,90坦克,stairdismount,开朗游艺,二次元卡牌日式动漫,方舟生存：丛林探险,枪械 模拟器左轮,虎皇互娱-龙争虎斗,游易斗地主,勇士守护,杯子接水,莽仙纪,香腸派對,家居设计 改造王,木偶人,烈火私服,斗帝,三色绘恋,猪猪侠之竞球小英雄,完美的线,剑与家园:巨龙时代,神话手游,wind rider,明珠卡,皇冠足球体育,统一代码查询,百变美,dungeonmaker,明日过后,总裁养成,粉红血液,国风游戏,至尊蓝月,博乐娱乐,王权三国,金贝炸金花,小兵大冲锋,憎恨之心,跑酷猫跑酷,鱼鱼乐,color road,兔子吃胡萝卜,如果明天是晴天,绝地求生.全军出击,恋与宫廷,剑影逍遥,拱趴大菠萝,清宫无间斗,沧海仙途,网易麻将,暗影之怒,权倾朝野,云裳,屠龙烈火,王者来了,prepare,仙剑四,像素吃鸡,抖音音乐,仙侣传说,跑胡子-湖南经典字牌游戏,孤胆车神:维加斯破解版,c.a.t.s.,模拟城市:我是市长,不要停!八分音符酱,轩辕剑参外传 天之痕,梦幻单机版,万岁爷,纪念碑谷免费1,模拟卡车2017,我在7年后等着你,百灵拼三张,心悦吉林麻将,星期六魔王,卡片怪兽,漂流少女,数码宝贝大乱斗,金贝游戏,我做夫人那些年,洋果子,命运之城,差不多英雄,传奇私服单机版,beholder,爽快斗地主,中国像棋,老铁扎心了,边锋掼蛋,四川熊猫游戏,如意棋牌,沙城烈焰,侠盗世界,英雄就是我,单机角色扮演类游戏,三国群英传单机游戏,四川熊猫,你划我猜,宫廷养成,消消乐海滨假日,模拟山羊僵尸版,顽皮小鳄鱼洗澡,精灵宝可梦日月,梦幻模拟战2,山水云南麻将,口袋之旅,simple rocket,温泉物语,暗影格斗2,不休骑士,sky force r,唱舞团,山海经传说,兰空,三国杀腾讯,cat fishing,小偷猫,true skate,dream league,dead island,迷你地铁,断勾卡血战麻将,天天麻将,诗词大会,皮卡丘游戏,飞机游戏大全,小小屠龙,钢琴快二,战舰少女r,梦幻诛仙2,鬼吹灯游戏,热血传奇单机,游戏排行榜,比较简单的大冒险,疯狂坦克,美美小店,萌宠大作战,doll,全职,小白兔,小偷,不用网络的游戏,我们的世界,纪元,常德跑胡子,末世,梦想花园,安吉拉猫,侠盗猎车手罪恶都市,fc游戏合集,超级玛丽经典,游戏社区,98拳皇格斗,你猜我答,孤岛余生,baobaobashi,问道小秘书,星际战舰,途牛斗地主,机场模拟,小黄人酷跑,黑白块,鹿鼎记,食堂,飘移,集结号,速算,边锋双扣,货车游戏,象棋游戏,螃蟹先生,萌宠,真实驾驶,盖房子,疯狂猜成语,疯狂农场,玛丽兄弟,狩猎,爱情游戏,炸弹,火车模拟器,滚球,淘金者,消灭,比特,杀手狙击,最新游戏,明日边缘,方块拼图,斗罗大陆游戏,捣蛋猪,挖金矿,拍电影,打豆豆,打猎,扑克牌,战机世界,恋舞,微微一笑很倾城,工程车游戏,山羊,小猫咪,富翁,宝宝画画,宝宝拼图,娱网棋牌,女仆,夺命侏罗纪,天使之翼,天使,合体,史上最难的游戏,召唤,厨师游戏,单机游戏大全,单机捕鱼,勇者,劲舞,剑魂之刃,上古,三维弹球,nba篮球,injustice,gt,cook,chess,星聚游戏-欢乐相聚,doctor's oath,诸天决,鬼和抢,疯狂影院,fr legend,跳舞的笔手游,REALM WAR,巴尔迪老师,仙境西游,蹦战纪,妖怪大魔王,风之大路,找到老公的私房钱,grim soul,ballblast,斗破修仙,表情锅,战箭天下,god hand go,摩天轮app,迷失古堡,王者勋章,九州异闻录,德州扑克app,蛋蛋花,QQ华夏手游,，乐高,全面出击,小春传奇,投影寻真shadowmatic,神怒,宫廷记,跳一跳微信版,inside免费版,塔防之光,英雄请留步,金花游戏,卡牌塔防,最囧游戏 4,迷你世界: 联机像素积木沙盒游戏,英雄无敌3死亡阴影单机,酷跑游戏,,比手画脚-随身版,2048 中文版,hustle castle – 成为避难所的骑士,游戏茶苑双扣-温州麻将 火拼比赛 千变百变双扣,最终幻想:觉醒,口袋妖怪- 皮卡丘游戏,街头霸王 免费,热血合击,中国象棋在线,初音速,世界战争英雄,仙侠挂机,神物3,贪玩棋牌,倔地求升,红名霸业,絶地求生,龙骑士战记,29天,蜀山手游,传奇私服最新,禧妃,扎金花赢钱,ar dragon,我叫mt世界,魔兽守卫军2,躲猫猫大作战,铁血刺客,snake vs block,倩女幽魂口袋版,玛法,罪恶都市中文版,肖肖乐,空战联盟,谜你世界,混沌与秩序3,衡阳十胡卡,末日危机,欢聚麻将,万人棋牌,小小航海士,tile rider,二次元少女,超冒险小镇物语,鲨鱼模拟器,火柴蜘蛛侠英雄,拳皇世界,休闲游戏大全,横版动作游戏,哥哥游戏,汤姆猫跑酷免费,神兽金刚游戏,西游记释厄传,大作战游戏,桃花源记2,绳索英雄2,toon blast,瘟疫公司免费版,闲来宁夏麻将,同城跑胡子全集,cut the rope,缪斯计划,嵊州麻将,太古,缤果消消乐,真人棋牌游戏,仙剑奇侠传3d回合,qq幻想,全民超市,热血霸业,feist,安魂曲,欢乐真人麻将,双休,手机麻将,subway surf,steve,英魂之刃手游,我的女友,英魂,offroad,策略网游,三国单机游戏,山西麻将,舟山麻将,熊大熊二游戏,格斗游戏大全,汽车游戏大全,魔兽世界手游,新斗罗大陆,三国志单机版,钢琴快,三国战,战棋类游戏,老虎机单机版,多益,四人斗地主腾讯,opus,六龙争霸,亲朋捕鱼,安琪拉,仙侠单机,大球吃小球,撸啊撸,全民炸金花,欢乐棋牌,roguelike,小小理发师,日式rpg,爆笑虫子,人格,冒险岛手游,小孩子玩的游戏,奴隶,孤岛求生,霸王龙游戏,无锡麻将,拳皇97单机,火柴人联盟2,住宅梦物语,景德镇麻将,长春麻将小鸡飞蛋,战争策略,战争机器,热门手游,求生游戏,摸拟游戏,川麻将,大富翁腾讯,同城游戏大厅,齐天大圣,麻雀,鳄鱼小顽皮爱洗澡2,高铁游戏,顶蘑菇,鞍山麻将,阻击手,闪电部队,长牌,野外生存,赛车游戏免费,诺曼底登陆,诺亚传说,血族,苍穹,芜湖麻将,脱衣服,网球王子,绍兴麻将,砖块,电影制作,玩具,猫和老鼠游戏,猜谜语,沈阳四冲,汉堡游戏,模拟驾驶飞机,暴打老板,晃晃麻将,方块游戏,数字消消乐,接龙,拳击游戏,打滚子,手枪游戏,手指滑板,战斗游戏,战地指挥官,弹弹岛,小狗游戏,封神演义传,妖姬ol,奔跑吧,天天农场,大战游戏,城堡,地牢猎手4,围城,四冲,呆萌小怪物,同城打大a,合金弹头无敌版,口袋西游,冒险王,养鱼,八十分,像素射击,傲气雄鹰,体育游戏,乒乓球游戏,丹东麻将,东北刨幺,不可思议,standoff,stack,shadowmatic,rider,lushi,kami,golf,g5游戏,dead,batman,mingrizhihou,斗帝传奇:焚诀,蛮荒行星,虎皇,疯狂流浪汉,泰洛尔颂歌,宿舍是不可能核平的!,花创互娱,大话西游变态版,水杯游戏,cube escape paradox,元气骑士。,monster girl maker,澳门电玩棋牌,暴破少女,我的世界绝地求生,巴尔迪,超级星鱼,隆中对,绕圈跑,王者打砖块,逃跑吧,龙卷风游戏,最强西游,热血传奇复古,中国体育福利彩票,迷你吃鸡,twenty48,醉仙途,广告侠,支付宝到账铃声,追光娱乐,real car parking 2,提现扎金花,love balls,萌猫物语,怪物老婆养成记,第九滴血,妲己传,一品官途,新诛仙手游,天际跳跃,吃雞戰場,turboprop flight simulator,我的世界枪战吃鸡,绝地求生:吃鸡战场,絕地求生 全軍出擊,可口的披萨,美味的披萨,生死狙击4399,消灭星星2018,大掌门2-武侠rpg手游巅峰巨作,东京战纪,乐享棋牌,传奇1.85,全新三国,三国志卡牌,使命荣耀,魔幻纪元,捕鱼游戏机,探灵,我在七年后等你,骰子摇一摇-酒吧、聚会,1.76,三国战记-风云再起,金鲨银鲨-老虎机,dumb ways to die,愤怒的小鸟 变形金刚,build a bridge!,双扣-浙江经典棋牌游戏,欢乐麻将•腾讯,圈地围城大作战,color number,高达争锋对决,星星消消乐2018新版,球球与白块,口袋妖怪宝可梦,危境崛起,跳棋双人,修真风云录,qq炫舞正版手游,魂之轨迹,绝地球生,修真之旅,传奇世界复古,九州行,县令,你身上有她的香水味,小酒馆,万豪棋牌,云顶娱乐,天马乐园,楚留香手游,无双赵云传,大发棋牌,熊熊乐园,欧布奥特曼,野蛮,希尔薇,仙侠修仙,梦幻药剂,dnf手游版,cookie cats pop,热血传奇单机版,九州风云,三国街机霸王,声音游戏,上海敲麻,合击传奇,吉祥吉林麻将,武穴麻将,网上百家乐,开心大赢家,宝宝长相预测,ufc格斗,无畏战舰,木筏,梦幻西游口袋,红色警戒单机版,机器人大乱斗,传奇英雄,火柴蜘蛛侠,叶罗丽仙子,联机游戏大全,巅峰坦克,云南山水麻将,龙港麻将,切西瓜免费,潜江晃晃,推理学院,战地模拟器,乐高城市警察,广西山水麻将,筑志红中麻将,my country,西游挂机大乱斗,疾风天下,众乐棋牌,fifa online 3,gamepigeon,凡人修仙记,妃,fifa online,850棋牌游戏,沙城争霸,熊出没之机甲熊大,哈狗台州,野狐围棋,寿司大厨,wood puzzle,big fish,wwe 2k,打鱼赢钱游戏,暖床,the tribez,extreme landing,drive ahead,砖块消消乐,qq欢乐斗地主,利比小公主,邳州麻将,传奇永恒,六界仙尊,地铁酷跑二,多人联机游戏,滚动的球,传世手游,超级幻影猫,最囧游戏3,武动乾坤手游,太极熊猫3,三国猛将,假面骑士铠武,梦幻庄园,儿童画画游戏,帅土之滨,整蛊邻居,涂游斗地主,南瓜先生大冒险,梦100,真人赢三张,q传,fatego,三国群英传3,百变方块,pinout,情缘,博乐,流星,碰撞,梯子,你是我的阳光,朱罗纪世界,幺地人,爱洗澡的小鳄鱼,穿越火箭,经营策略,三公,幽灵行动,大货车游戏,三张牌,孤单枪手,温岭麻将,乐高世界,极限越野,恐龙快打无限币,2岁儿童游戏,梦幻三国,自行车游戏,古风游戏,单机斗地主免费,2048俄罗斯方块,魔女,魔力,马戏团,饭店,风火轮,霸王大陆,街头,血战到底麻将,蓝球,菇菇,茶苑,舰队,舞蹈游戏,胡莱三国,美少女养成,米拉奇战记,神魔大陆,皇后养成计划,百万亚瑟王,疯狂的小鸟,画画板,男友,牌类游戏,爱情公寓,火影忍者疾风传,海贼王启航,海绵宝宝游戏,海岛大亨,沙盒游戏,永恒战士2,死亡,极速狂飙,杀手47,最好玩的游戏,暴走,方块世界,探险游戏,拱猪,托马斯小火车,扑鱼,战车,战地4,怪物,弹钢琴游戏,弹琴游戏,异形,帝王三国,将军的荣耀,密室逃脱游戏,孤岛,女生小游戏,女孩子玩的游戏,天空,天天爱,填大坑,哆啦a梦,古装游戏,古代,卧底,北京麻将,剧情游戏,出租车游戏,养宠物,儿童绘画,仙境,仙剑奇侠传5,仓鼠,二七王,争霸,丧尸女友,xplane,trainz,tank,q版,puzzle,patch,nova,kingdomrush,ketchapp,gtasa,girl,flip,dynamix,cod,2047,2018,最强连一连 2018,智慧大逃亡,战国之道-序章,深圳福彩,truck simulator2018,神躲避,诛天诀,全名主公2,u赢游戏,鑫盛游戏,四方坦克大战,tornado.io!,shoot n merge,我要当皇上,薯片厨房,恐怖老奶奶。,广东麻将好友房,辐射:生存日记,腾讯麻将好友房,哆啦A梦飞车,枭雄的荣耀,途游四川麻将,一木娛樂-99大戰,mia气-划水麻将,啊瑞斯病毒,升职游戏,你好,邻居,头脑吃鸡-王者赛季,老奶奶恐怖游戏,黑洞来了,全职猎人X,奶奶 模拟器,世界卡车,gogo加速器,老公的私房钱,枪手来了,左右消消消,中国福利彩票官网,阿拉德大陆,三界逍遥,模拟总裁,Taptapheroes,神途传奇,上古神兽记,恶狼游戏,神海4,即刻棋牌,侠盗骑兵,三国志大战M,萌萌餐厅,钱真多,吃鸡游戏刺激战场,滴水钱包,遥控小飞机,最强弹一弹,弹球王者,航母降落hd,王爷快过来,flfa足球世界,星河联盟,逍遥剑客,龙城战歌,二次元策略,国风卡牌,三国志群雄传,世界制造者,挂机修仙,疯狂塔防战,轻松跑得快,群英之战,第五人,见缝插刀,模拟飞行2018,奇喵的画家,裁决传说,嘉妃q传,腾讯围棋（野狐）,蜀山情缘ol,石器文明,梦幻西游变态版,toytown,超车小能手,妃子游戏,旅行的青蛙,trap adventure 2,小金棋牌,三国江山策,大魔王漫画,模拟农场2018,猫咪很可爱,twisty road!,大话西游单机版,传奇1.80,剑之荣耀,俄罗斯方块经典版,捕鱼万炮版,人生赢家,百人三张,抖音小游戏,欣悦麻将,飘移风暴,万王,飞行棋-多人对战版,大鱼吃小鱼-经典版,彩独 2,保皇-山东人的游戏,辐射:避难所,刺客信条：本色,冰雪奇缘:冰纷乐,x-plane10,赛车游戏免费 真实赛车,血流成河-换三张一胡到底,love you to bits,paper.io,sniper 3d破解版,闪击战,牛牛游戏厅,剑歌行,rento fortune,养猪场mix,永远的七日之都,小小英雄传2,屠龙传世,那一剑江湖,一起来冒险,散人传说,当官手游,坎巴拉太空计划,juedi,抢我,36种死法,stack ar,湘西棋牌,文字放置,画画猜猜,失落园,烹饪达人,姬魔恋战纪,小虾米闯江湖,贪玩蓝月单机版,托拉姆物语,三国策略手游,leap on,昆仑墟,永恒边境,不洗牌斗地主,windin,lastdayonearth,真钱博彩,中至常熟麻将,你行你上,绝境求生,澳门百家乐app,爱来麻将,热血单机,cooking craze,欢乐牛牛大厅版,真无双三国,腾讯欢乐,飞越仙境,暗黑手游,模拟手枪,ninja arashi,赌钱平台,塔防奇兵,我的使命,大狩猎,昆特,金庸武侠,拳王97单机,散人传奇,传奇扑克,物种起源,最后一步,锄大地腾讯,火柴人绳索,公主美发沙龙,集杰大连棋牌,三国志群英传,侠客传,娱乐场游戏,官老爷,三国群雄,掼蛋单机版,宫斗手游,仙灵大作战,一起来跳舞,宁夏麻将,荒岛求生游戏,心动女友,赤月传奇,吃蛇大作战,光影对决,海上生存,真三国无双单机,抽卡游戏,侏罗纪世界进化,红包斗地主,抽卡,练车软件,纪念碑谷2免费版,猫星人大战,像素生存,橡皮泥游戏,内蒙麻将,变形机器人英雄,dance line,腾讯欢乐五子棋,不思议,叫我官老爷,疯狂贪吃蛇,red dead redemption,怀化红拐弯,mini metro,热血战神,阴阳师手游,石油大亨,fire ball,over cook,yy麻将,peach blood,奕乐贵州捉鸡麻将,game loft,shadow fight 3,红警手游,妖精组合,料理次元,战天下,七雄战记,挖机,王者军团,守望先锋手游,逮狗腿,三海经,新全职猎人,爱奇艺游戏,求求,九阴真经3d,贪吃蛇大战,气车游戏,问到,破天一剑,糖果派对,rockstar games,real racing,high school,hay day,汽车改装可视化,在线棋牌,宝宝长相,爆裂飞车游戏,疯狂动物,求生大作战,太阁立志传,knife,cooking dash,car parking,变形金刚救援机器人,众博棋牌,张飞,江湖x,全民麻将,三目童子,洗澡的鳄鱼,说剑,巴拉巴拉小魔仙游戏,修仙世界,海岛生存,三国塔防传奇,小朋友玩的游戏,帮帮龙,多乐升级,贵阳捉鸡,甜甜萌物语,京剧猫,传奇世界手游,魔窟,沙城霸业,斗罗,卡牌类手游,单机游戏大全免费射击,梦幻水族箱,像棋,乱世三国,哈弗互联,战锤40k,异次元,传奇盛世,撕掉她的衣服,魔龙之魂,圣火徽章,问道奇宝斋,混斗罗,我叫mt3,代号47,恩施麻将,寻龙诀,龙骑,星河战舰,神器宝贝,九层妖塔,钢琴键,云顶游戏,武侠单机游戏,温州双扣,欢乐斗地主赢话费,点杀泰坦,老爹游戏,火柴人英雄,鱼丸游戏,rento,鲤,群侠,王朝,同一个世界,拳皇单机,weapons,无尽战区,铠甲勇士打怪兽,快打,九洲,黑暗世界,大庆麻将,盗墓迷城,大卡车游戏,大卡车,大陆,长腿爸爸,船,狼,海岛奇兵破解版,twenty,红警4大国崛起,坑爹小游戏,神秘花园,机战王,手游传奇,无尽大冒险,克鲁塞德,全民枪战2,方块逃脱,客车模拟,gta5游戏,摸拟驾驶,单词风暴,大圣归来,奇迹暖暖环游世界,gg斗地主,我是大官人,江苏快3,仙剑决,勇敢的约翰,救护车游戏,挖掘机模拟器,减压游戏,lifeline,美食大战老鼠,ae86,黎明之光,饥饿鲨进化破解版,飞禽走兽老虎机,秦时明月手游,神奇宝贝xy,盛大传奇,点击泰坦,火箭游戏,漂移赛车,坦克大战1990,吊车游戏,合成游戏,升级单机版,黑白,黎明,鳄鱼爱洗澡,魏蜀吴,马里奥赛车,音乐大师,闪客快打,金蟾捕鱼,逃出,过家家,边境,轮盘,跳楼,赛尔号游戏,设计游戏,血战麻将,蝙蝠侠游戏,萌娘餐厅,莽荒记,荒岛生存,花牌,联众,羽毛球游戏,网球游戏,网游游戏,经营类,经典方块,红色,矢量,真人麻将,相棋,直升飞机,直升机游戏,监狱,皇后,疯狂捕鱼,现代,玩具兵,犯罪,特种部队,爸爸去哪儿,燃烧的蔬菜,热血高校,热血三国,滴滴打人,深海捕鱼,汉诺塔,水上乐园,毛毛虫,欢乐四川麻将,模拟人生3,梦幻手游,桌球游戏,杀手2,暗黑挂机,料理妈妈,整蛊,搞笑游戏,挂机三国志,找东西,战斗,我是卧底,成都麻将,愤怒的小鸟太空版,愤怒,忍者必须死2,忍着,征途手游,影子格斗,开飞机游戏,开心斗地主,帝国塔防,巨神战击队,尾行,小宝宝游戏,射击游戏大全,密室逃脱1,宝石,孩子长相,奥比岛,奇兵,大脑训练,大白鲨,大战,大师,复仇者联盟2,地牢猎手5,地产大亨,圈圈,围棋单机,四驱车,吸血鬼,吕布传,史上,古代换装游戏,口袋妖怪红宝石,即时战略,博雅四川麻将,单机角色扮演游戏,单机塔防游戏,割绳子2,冰淇淋,冰封王座,农场物语,养猪,养成计划,共和国之辉,全民水浒,儿童益智,偶像,做菜游戏,仙剑诀,二战游戏,二十一点,二七十,乙女游戏,乒乓,乐高蝙蝠侠,两人游戏,一个都不能死,wodeshijie,three,tennis,solitaire,snake,qq餐厅,qq升级,plank,ninja,horizon,hit,football,fish,emily,dream,dota传奇,blendoku,baseball,arpg,24,1945,13张,first class flurry hd,双子兄弟,妹妹影院,spaceflight,fox hime zero,最强连连看,流星剑梦,宝宝汽车城市,rhythm cat hd,单挑荒野,烹饪厨师,ar鬼和枪,重生！蛮荒行星,模拟左轮,food truck pup: 烹饪厨师,二次元联盟•格斗,培根配万物,王者裁决：神兵,开荒纪元手游,疯狂的车轮比赛,植物大战僵尸,泰拉石契约,赤月•盛世霸业,王牌大作战！,土耳其方块,bacon – the game,寂灭深渊,香蜜沉沉烬如霜游戏,边锋浙江游戏,天剑神诀,火柴人蜘蛛,恐怖奶奶,炸个小花金,Galaga AR,真实模拟枪械,貂蝉三国,功夫圣手,腾讯广东麻雀,战塔,西游状元坊,armedheist,欧呜欧,魔芋手游,暴破少女:哥哥不要嘛,穿越火线,正当防卫4,金豪斗牛,保护我,海贼无双,派对,桥牌,日系,无双,放置类,恶魔城,养猪场,你好英雄,九阴,东京食尸鬼,room,red dead,rdr,fireballs 3D,昭和杂货店3,jiang尸感染,frlegends,哥哥不要嘛,我要翘班,imeiju,枪战吃鸡,恩腿子麻将,tank stars,骰子猎人,中油游戏,冠军网球,三国志2018,十二战纪,传奇召唤师,现代战争:尖峰对决,点杀泰坦 2,俄罗斯方块 -- 经典怀旧,巧虎成长之旅,oil hunt 2,升官游戏,崇阳麻将,封神召唤师,滚动的天空3,三国英雄杀,滚动的天空无限球,恐龙世界2,葫芦娃手游,罗斯方块,全民福州麻将,放置传奇,回合制卡牌,机动战队,劲舞团手游,happy wheels,广西麻将,筛子摇一摇,水果切切乐,摸金校尉,率土,真实女友,末日求生,烧脑,merge,猪猪侠跑酷,丧尸游戏,qq游戏欢乐斗地主,速度与激情8,驾驶游戏,饥饿,连线,躲猫猫,脱衣服游戏,篮球经理,真实武器,火线指令,波克,桥梁,无人机,找茬游戏,恶作剧,怪兽,小孩游戏,国王保卫战,倚天屠龙记,三国争霸,rush,marvel,fps,开局一只鲲,仙剑情缘2,迷城特工,日式二次元,超级粘液,地下城与勇士手游版,黑洞大作战免费,一刀烈火,阿瑞斯,大头三国,叫我小县令,先发制人,开心消消乐 2018,斗牛娱乐,漫威: 超级争霸战,金花棋牌,英雄必须吼,斗牛欢乐版,小玛丽捕鱼,捕鱼欢乐颂,都市游戏,武汉麻将红中赖子杠,三国志吕布传,史上最囧游戏,dead trigger 2,many bricks breaker,小冰冰,cat hotel,贪婪,早教益智,乐高侏罗纪世界,猎鱼达人,成语猜猜看,天天捕鱼,天龙,看门狗,废土,奇怪的大冒险,鳄鱼洗澡2,后宫养成,福建麻将,盗墓笔记游戏,大冒险游戏,十三道,连一连,老奶奶,练车,神秘逃亡,灌蛋,湖南跑得快,消消消,海战,死亡扳机,极品,挖土机游戏,影子,幻想,小狗,密室逃脱中文,多人游戏,填字游戏,横扫千军",8,5,8,3d+vector+space+pixiv+markdown+youtube+niconico+shaco+ao3+archive-of-our-own+996icu+musedash+ding-zhen+zheng-shuang+cierra-runis+mia-runis+kyou-ka+overidea+paryi+shinka-musume+shen-xiaoya+hiseki-erio+kagura-nana,GitHub
2,vanilla-vectors-3d,https://github.com/thormeier/vanilla-vectors-3d.git,JS library for basic vector calculations in a 3D space,7,1,7,3d+vector+space,GitHub
3,TCD.Mathematics,https://github.com/michaelosthege/TCD.Mathematics.git,"TCD.Mathematics is a library for a variety of vector-based calculations in 3D space, including Lines, Planes, and methods for calculating intersections.",6,1,6,3d+vector+space,GitHub
4,SpaceTypes,https://github.com/barneydellar/SpaceTypes.git,A C++ library for 3D points and vectors that are strongly typed on their coordinate space. ,5,0,5,3d+vector+space,GitHub
5,3DHodgeDecomposition,https://github.com/rdzhao/3DHodgeDecomposition.git,A compendium of Hodge decompositions of vector fields on tetrahedral meshes embedded in the 3D Euclidean space.,3,0,3,3d+vector+space,GitHub
6,Simple-3D-Renderer-using-p5.js,https://github.com/Vince14Genius/Simple-3D-Renderer-using-p5.js.git,"A simple 3D renderer, created using the library p5.js, only supports rotation along the y-axis (movement is allowed on all axes); it is done by translating points from 3D space to a 2D screen using simple vector & trig operations, and this project is used for my Math IA. ",3,0,3,3d+vector+space+javascript+p5js+3d-engine,GitHub
7,numpy,https://github.com/Aryia-Behroziuan/numpy.git,"Quickstart tutorial Prerequisites Before reading this tutorial you should know a bit of Python. If you would like to refresh your memory, take a look at the Python tutorial.  If you wish to work the examples in this tutorial, you must also have some software installed on your computer. Please see https://scipy.org/install.html for instructions.  Learner profile  This tutorial is intended as a quick overview of algebra and arrays in NumPy and want to understand how n-dimensional (n>=2) arrays are represented and can be manipulated. In particular, if you don’t know how to apply common functions to n-dimensional arrays (without using for-loops), or if you want to understand axis and shape properties for n-dimensional arrays, this tutorial might be of help.  Learning Objectives  After this tutorial, you should be able to:  Understand the difference between one-, two- and n-dimensional arrays in NumPy;  Understand how to apply some linear algebra operations to n-dimensional arrays without using for-loops;  Understand axis and shape properties for n-dimensional arrays.  The Basics NumPy’s main object is the homogeneous multidimensional array. It is a table of elements (usually numbers), all of the same type, indexed by a tuple of non-negative integers. In NumPy dimensions are called axes.  For example, the coordinates of a point in 3D space [1, 2, 1] has one axis. That axis has 3 elements in it, so we say it has a length of 3. In the example pictured below, the array has 2 axes. The first axis has a length of 2, the second axis has a length of 3.  [[ 1., 0., 0.],  [ 0., 1., 2.]] NumPy’s array class is called ndarray. It is also known by the alias array. Note that numpy.array is not the same as the Standard Python Library class array.array, which only handles one-dimensional arrays and offers less functionality. The more important attributes of an ndarray object are:  ndarray.ndim the number of axes (dimensions) of the array.  ndarray.shape the dimensions of the array. This is a tuple of integers indicating the size of the array in each dimension. For a matrix with n rows and m columns, shape will be (n,m). The length of the shape tuple is therefore the number of axes, ndim.  ndarray.size the total number of elements of the array. This is equal to the product of the elements of shape.  ndarray.dtype an object describing the type of the elements in the array. One can create or specify dtype’s using standard Python types. Additionally NumPy provides types of its own. numpy.int32, numpy.int16, and numpy.float64 are some examples.  ndarray.itemsize the size in bytes of each element of the array. For example, an array of elements of type float64 has itemsize 8 (=64/8), while one of type complex32 has itemsize 4 (=32/8). It is equivalent to ndarray.dtype.itemsize.  ndarray.data the buffer containing the actual elements of the array. Normally, we won’t need to use this attribute because we will access the elements in an array using indexing facilities.  An example >>> import numpy as np a = np.arange(15).reshape(3, 5) a array([[ 0,  1,  2,  3,  4],        [ 5,  6,  7,  8,  9],        [10, 11, 12, 13, 14]]) a.shape (3, 5) a.ndim 2 a.dtype.name 'int64' a.itemsize 8 a.size 15 type(a) <class 'numpy.ndarray'> b = np.array([6, 7, 8]) b array([6, 7, 8]) type(b) <class 'numpy.ndarray'> Array Creation There are several ways to create arrays.  For example, you can create an array from a regular Python list or tuple using the array function. The type of the resulting array is deduced from the type of the elements in the sequences.  >>> >>> import numpy as np >>> a = np.array([2,3,4]) >>> a array([2, 3, 4]) >>> a.dtype dtype('int64') >>> b = np.array([1.2, 3.5, 5.1]) >>> b.dtype dtype('float64') A frequent error consists in calling array with multiple arguments, rather than providing a single sequence as an argument.  >>> >>> a = np.array(1,2,3,4)    # WRONG Traceback (most recent call last):   ... TypeError: array() takes from 1 to 2 positional arguments but 4 were given >>> a = np.array([1,2,3,4])  # RIGHT array transforms sequences of sequences into two-dimensional arrays, sequences of sequences of sequences into three-dimensional arrays, and so on.  >>> >>> b = np.array([(1.5,2,3), (4,5,6)]) >>> b array([[1.5, 2. , 3. ],        [4. , 5. , 6. ]]) The type of the array can also be explicitly specified at creation time:  >>> >>> c = np.array( [ [1,2], [3,4] ], dtype=complex ) >>> c array([[1.+0.j, 2.+0.j],        [3.+0.j, 4.+0.j]]) Often, the elements of an array are originally unknown, but its size is known. Hence, NumPy offers several functions to create arrays with initial placeholder content. These minimize the necessity of growing arrays, an expensive operation.  The function zeros creates an array full of zeros, the function ones creates an array full of ones, and the function empty creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is float64.  >>> >>> np.zeros((3, 4)) array([[0., 0., 0., 0.],        [0., 0., 0., 0.],        [0., 0., 0., 0.]]) >>> np.ones( (2,3,4), dtype=np.int16 )                # dtype can also be specified array([[[1, 1, 1, 1],         [1, 1, 1, 1],         [1, 1, 1, 1]],         [[1, 1, 1, 1],         [1, 1, 1, 1],         [1, 1, 1, 1]]], dtype=int16) >>> np.empty( (2,3) )                                 # uninitialized array([[  3.73603959e-262,   6.02658058e-154,   6.55490914e-260],  # may vary        [  5.30498948e-313,   3.14673309e-307,   1.00000000e+000]]) To create sequences of numbers, NumPy provides the arange function which is analogous to the Python built-in range, but returns an array.  >>> >>> np.arange( 10, 30, 5 ) array([10, 15, 20, 25]) >>> np.arange( 0, 2, 0.3 )                 # it accepts float arguments array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8]) When arange is used with floating point arguments, it is generally not possible to predict the number of elements obtained, due to the finite floating point precision. For this reason, it is usually better to use the function linspace that receives as an argument the number of elements that we want, instead of the step:  >>> >>> from numpy import pi >>> np.linspace( 0, 2, 9 )                 # 9 numbers from 0 to 2 array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  ]) >>> x = np.linspace( 0, 2*pi, 100 )        # useful to evaluate function at lots of points >>> f = np.sin(x) See also array, zeros, zeros_like, ones, ones_like, empty, empty_like, arange, linspace, numpy.random.Generator.rand, numpy.random.Generator.randn, fromfunction, fromfile  Printing Arrays When you print an array, NumPy displays it in a similar way to nested lists, but with the following layout:  the last axis is printed from left to right,  the second-to-last is printed from top to bottom,  the rest are also printed from top to bottom, with each slice separated from the next by an empty line.  One-dimensional arrays are then printed as rows, bidimensionals as matrices and tridimensionals as lists of matrices.  >>> >>> a = np.arange(6)                         # 1d array >>> print(a) [0 1 2 3 4 5] >>> >>> b = np.arange(12).reshape(4,3)           # 2d array >>> print(b) [[ 0  1  2]  [ 3  4  5]  [ 6  7  8]  [ 9 10 11]] >>> >>> c = np.arange(24).reshape(2,3,4)         # 3d array >>> print(c) [[[ 0  1  2  3]   [ 4  5  6  7]   [ 8  9 10 11]]   [[12 13 14 15]   [16 17 18 19]   [20 21 22 23]]] See below to get more details on reshape.  If an array is too large to be printed, NumPy automatically skips the central part of the array and only prints the corners:  >>> >>> print(np.arange(10000)) [   0    1    2 ... 9997 9998 9999] >>> >>> print(np.arange(10000).reshape(100,100)) [[   0    1    2 ...   97   98   99]  [ 100  101  102 ...  197  198  199]  [ 200  201  202 ...  297  298  299]  ...  [9700 9701 9702 ... 9797 9798 9799]  [9800 9801 9802 ... 9897 9898 9899]  [9900 9901 9902 ... 9997 9998 9999]] To disable this behaviour and force NumPy to print the entire array, you can change the printing options using set_printoptions.  >>> >>> np.set_printoptions(threshold=sys.maxsize)       # sys module should be imported Basic Operations Arithmetic operators on arrays apply elementwise. A new array is created and filled with the result.  >>> >>> a = np.array( [20,30,40,50] ) >>> b = np.arange( 4 ) >>> b array([0, 1, 2, 3]) >>> c = a-b >>> c array([20, 29, 38, 47]) >>> b**2 array([0, 1, 4, 9]) >>> 10*np.sin(a) array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854]) >>> a<35 array([ True,  True, False, False]) Unlike in many matrix languages, the product operator * operates elementwise in NumPy arrays. The matrix product can be performed using the @ operator (in python >=3.5) or the dot function or method:  >>> >>> A = np.array( [[1,1], ...                [0,1]] ) >>> B = np.array( [[2,0], ...                [3,4]] ) >>> A * B                       # elementwise product array([[2, 0],        [0, 4]]) >>> A @ B                       # matrix product array([[5, 4],        [3, 4]]) >>> A.dot(B)                    # another matrix product array([[5, 4],        [3, 4]]) Some operations, such as += and *=, act in place to modify an existing array rather than create a new one.  >>> >>> rg = np.random.default_rng(1)     # create instance of default random number generator >>> a = np.ones((2,3), dtype=int) >>> b = rg.random((2,3)) >>> a *= 3 >>> a array([[3, 3, 3],        [3, 3, 3]]) >>> b += a >>> b array([[3.51182162, 3.9504637 , 3.14415961],        [3.94864945, 3.31183145, 3.42332645]]) >>> a += b                            # b is not automatically converted to integer type Traceback (most recent call last):     ... numpy.core._exceptions.UFuncTypeError: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind' When operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting).  >>> >>> a = np.ones(3, dtype=np.int32) >>> b = np.linspace(0,pi,3) >>> b.dtype.name 'float64' >>> c = a+b >>> c array([1.        , 2.57079633, 4.14159265]) >>> c.dtype.name 'float64' >>> d = np.exp(c*1j) >>> d array([ 0.54030231+0.84147098j, -0.84147098+0.54030231j,        -0.54030231-0.84147098j]) >>> d.dtype.name 'complex128' Many unary operations, such as computing the sum of all the elements in the array, are implemented as methods of the ndarray class.  >>> >>> a = rg.random((2,3)) >>> a array([[0.82770259, 0.40919914, 0.54959369],        [0.02755911, 0.75351311, 0.53814331]]) >>> a.sum() 3.1057109529998157 >>> a.min() 0.027559113243068367 >>> a.max() 0.8277025938204418 By default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the axis parameter you can apply an operation along the specified axis of an array:  >>> >>> b = np.arange(12).reshape(3,4) >>> b array([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11]]) >>> >>> b.sum(axis=0)                            # sum of each column array([12, 15, 18, 21]) >>> >>> b.min(axis=1)                            # min of each row array([0, 4, 8]) >>> >>> b.cumsum(axis=1)                         # cumulative sum along each row array([[ 0,  1,  3,  6],        [ 4,  9, 15, 22],        [ 8, 17, 27, 38]]) Universal Functions NumPy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called “universal functions”(ufunc). Within NumPy, these functions operate elementwise on an array, producing an array as output.  >>> >>> B = np.arange(3) >>> B array([0, 1, 2]) >>> np.exp(B) array([1.        , 2.71828183, 7.3890561 ]) >>> np.sqrt(B) array([0.        , 1.        , 1.41421356]) >>> C = np.array([2., -1., 4.]) >>> np.add(B, C) array([2., 0., 6.]) See also all, any, apply_along_axis, argmax, argmin, argsort, average, bincount, ceil, clip, conj, corrcoef, cov, cross, cumprod, cumsum, diff, dot, floor, inner, invert, lexsort, max, maximum, mean, median, min, minimum, nonzero, outer, prod, re, round, sort, std, sum, trace, transpose, var, vdot, vectorize, where  Indexing, Slicing and Iterating One-dimensional arrays can be indexed, sliced and iterated over, much like lists and other Python sequences.  >>> >>> a = np.arange(10)**3 >>> a array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729]) >>> a[2] 8 >>> a[2:5] array([ 8, 27, 64]) # equivalent to a[0:6:2] = 1000; # from start to position 6, exclusive, set every 2nd element to 1000 >>> a[:6:2] = 1000 >>> a array([1000,    1, 1000,   27, 1000,  125,  216,  343,  512,  729]) >>> a[ : :-1]                                 # reversed a array([ 729,  512,  343,  216,  125, 1000,   27, 1000,    1, 1000]) >>> for i in a: ...     print(i**(1/3.)) ... 9.999999999999998 1.0 9.999999999999998 3.0 9.999999999999998 4.999999999999999 5.999999999999999 6.999999999999999 7.999999999999999 8.999999999999998 Multidimensional arrays can have one index per axis. These indices are given in a tuple separated by commas:  >>> >>> def f(x,y): ...     return 10*x+y ... >>> b = np.fromfunction(f,(5,4),dtype=int) >>> b array([[ 0,  1,  2,  3],        [10, 11, 12, 13],        [20, 21, 22, 23],        [30, 31, 32, 33],        [40, 41, 42, 43]]) >>> b[2,3] 23 >>> b[0:5, 1]                       # each row in the second column of b array([ 1, 11, 21, 31, 41]) >>> b[ : ,1]                        # equivalent to the previous example array([ 1, 11, 21, 31, 41]) >>> b[1:3, : ]                      # each column in the second and third row of b array([[10, 11, 12, 13],        [20, 21, 22, 23]]) When fewer indices are provided than the number of axes, the missing indices are considered complete slices:  >>> >>> b[-1]                                  # the last row. Equivalent to b[-1,:] array([40, 41, 42, 43]) The expression within brackets in b[i] is treated as an i followed by as many instances of : as needed to represent the remaining axes. NumPy also allows you to write this using dots as b[i,...].  The dots (...) represent as many colons as needed to produce a complete indexing tuple. For example, if x is an array with 5 axes, then  x[1,2,...] is equivalent to x[1,2,:,:,:],  x[...,3] to x[:,:,:,:,3] and  x[4,...,5,:] to x[4,:,:,5,:].  >>> >>> c = np.array( [[[  0,  1,  2],               # a 3D array (two stacked 2D arrays) ...                 [ 10, 12, 13]], ...                [[100,101,102], ...                 [110,112,113]]]) >>> c.shape (2, 2, 3) >>> c[1,...]                                   # same as c[1,:,:] or c[1] array([[100, 101, 102],        [110, 112, 113]]) >>> c[...,2]                                   # same as c[:,:,2] array([[  2,  13],        [102, 113]]) Iterating over multidimensional arrays is done with respect to the first axis:  >>> >>> for row in b: ...     print(row) ... [0 1 2 3] [10 11 12 13] [20 21 22 23] [30 31 32 33] [40 41 42 43] However, if one wants to perform an operation on each element in the array, one can use the flat attribute which is an iterator over all the elements of the array:  >>> >>> for element in b.flat: ...     print(element) ... 0 1 2 3 10 11 12 13 20 21 22 23 30 31 32 33 40 41 42 43 See also Indexing, Indexing (reference), newaxis, ndenumerate, indices  Shape Manipulation Changing the shape of an array An array has a shape given by the number of elements along each axis:  >>> >>> a = np.floor(10*rg.random((3,4))) >>> a array([[3., 7., 3., 4.],        [1., 4., 2., 2.],        [7., 2., 4., 9.]]) >>> a.shape (3, 4) The shape of an array can be changed with various commands. Note that the following three commands all return a modified array, but do not change the original array:  >>> >>> a.ravel()  # returns the array, flattened array([3., 7., 3., 4., 1., 4., 2., 2., 7., 2., 4., 9.]) >>> a.reshape(6,2)  # returns the array with a modified shape array([[3., 7.],        [3., 4.],        [1., 4.],        [2., 2.],        [7., 2.],        [4., 9.]]) >>> a.T  # returns the array, transposed array([[3., 1., 7.],        [7., 4., 2.],        [3., 2., 4.],        [4., 2., 9.]]) >>> a.T.shape (4, 3) >>> a.shape (3, 4) The order of the elements in the array resulting from ravel() is normally “C-style”, that is, the rightmost index “changes the fastest”, so the element after a[0,0] is a[0,1]. If the array is reshaped to some other shape, again the array is treated as “C-style”. NumPy normally creates arrays stored in this order, so ravel() will usually not need to copy its argument, but if the array was made by taking slices of another array or created with unusual options, it may need to be copied. The functions ravel() and reshape() can also be instructed, using an optional argument, to use FORTRAN-style arrays, in which the leftmost index changes the fastest.  The reshape function returns its argument with a modified shape, whereas the ndarray.resize method modifies the array itself:  >>> >>> a array([[3., 7., 3., 4.],        [1., 4., 2., 2.],        [7., 2., 4., 9.]]) >>> a.resize((2,6)) >>> a array([[3., 7., 3., 4., 1., 4.],        [2., 2., 7., 2., 4., 9.]]) If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated:  >>> >>> a.reshape(3,-1) array([[3., 7., 3., 4.],        [1., 4., 2., 2.],        [7., 2., 4., 9.]]) See also ndarray.shape, reshape, resize, ravel  Stacking together different arrays Several arrays can be stacked together along different axes:  >>> >>> a = np.floor(10*rg.random((2,2))) >>> a array([[9., 7.],        [5., 2.]]) >>> b = np.floor(10*rg.random((2,2))) >>> b array([[1., 9.],        [5., 1.]]) >>> np.vstack((a,b)) array([[9., 7.],        [5., 2.],        [1., 9.],        [5., 1.]]) >>> np.hstack((a,b)) array([[9., 7., 1., 9.],        [5., 2., 5., 1.]]) The function column_stack stacks 1D arrays as columns into a 2D array. It is equivalent to hstack only for 2D arrays:  >>> >>> from numpy import newaxis >>> np.column_stack((a,b))     # with 2D arrays array([[9., 7., 1., 9.],        [5., 2., 5., 1.]]) >>> a = np.array([4.,2.]) >>> b = np.array([3.,8.]) >>> np.column_stack((a,b))     # returns a 2D array array([[4., 3.],        [2., 8.]]) >>> np.hstack((a,b))           # the result is different array([4., 2., 3., 8.]) >>> a[:,newaxis]               # view `a` as a 2D column vector array([[4.],        [2.]]) >>> np.column_stack((a[:,newaxis],b[:,newaxis])) array([[4., 3.],        [2., 8.]]) >>> np.hstack((a[:,newaxis],b[:,newaxis]))   # the result is the same array([[4., 3.],        [2., 8.]]) On the other hand, the function row_stack is equivalent to vstack for any input arrays. In fact, row_stack is an alias for vstack:  >>> >>> np.column_stack is np.hstack False >>> np.row_stack is np.vstack True In general, for arrays with more than two dimensions, hstack stacks along their second axes, vstack stacks along their first axes, and concatenate allows for an optional arguments giving the number of the axis along which the concatenation should happen.  Note  In complex cases, r_ and c_ are useful for creating arrays by stacking numbers along one axis. They allow the use of range literals (“:”)  >>> >>> np.r_[1:4,0,4] array([1, 2, 3, 0, 4]) When used with arrays as arguments, r_ and c_ are similar to vstack and hstack in their default behavior, but allow for an optional argument giving the number of the axis along which to concatenate.  See also hstack, vstack, column_stack, concatenate, c_, r_  Splitting one array into several smaller ones Using hsplit, you can split an array along its horizontal axis, either by specifying the number of equally shaped arrays to return, or by specifying the columns after which the division should occur:  >>> >>> a = np.floor(10*rg.random((2,12))) >>> a array([[6., 7., 6., 9., 0., 5., 4., 0., 6., 8., 5., 2.],        [8., 5., 5., 7., 1., 8., 6., 7., 1., 8., 1., 0.]]) # Split a into 3 >>> np.hsplit(a,3) [array([[6., 7., 6., 9.],        [8., 5., 5., 7.]]), array([[0., 5., 4., 0.],        [1., 8., 6., 7.]]), array([[6., 8., 5., 2.],        [1., 8., 1., 0.]])] # Split a after the third and the fourth column >>> np.hsplit(a,(3,4)) [array([[6., 7., 6.],        [8., 5., 5.]]), array([[9.],        [7.]]), array([[0., 5., 4., 0., 6., 8., 5., 2.],        [1., 8., 6., 7., 1., 8., 1., 0.]])] vsplit splits along the vertical axis, and array_split allows one to specify along which axis to split.  Copies and Views When operating and manipulating arrays, their data is sometimes copied into a new array and sometimes not. This is often a source of confusion for beginners. There are three cases:  No Copy at All Simple assignments make no copy of objects or their data.  >>> >>> a = np.array([[ 0,  1,  2,  3], ...               [ 4,  5,  6,  7], ...               [ 8,  9, 10, 11]]) >>> b = a            # no new object is created >>> b is a           # a and b are two names for the same ndarray object True Python passes mutable objects as references, so function calls make no copy.  >>> >>> def f(x): ...     print(id(x)) ... >>> id(a)                           # id is a unique identifier of an object 148293216  # may vary >>> f(a) 148293216  # may vary View or Shallow Copy Different array objects can share the same data. The view method creates a new array object that looks at the same data.  >>> >>> c = a.view() >>> c is a False >>> c.base is a                        # c is a view of the data owned by a True >>> c.flags.owndata False >>> >>> c = c.reshape((2, 6))                      # a's shape doesn't change >>> a.shape (3, 4) >>> c[0, 4] = 1234                      # a's data changes >>> a array([[   0,    1,    2,    3],        [1234,    5,    6,    7],        [   8,    9,   10,   11]]) Slicing an array returns a view of it:  >>> >>> s = a[ : , 1:3]     # spaces added for clarity; could also be written ""s = a[:, 1:3]"" >>> s[:] = 10           # s[:] is a view of s. Note the difference between s = 10 and s[:] = 10 >>> a array([[   0,   10,   10,    3],        [1234,   10,   10,    7],        [   8,   10,   10,   11]]) Deep Copy The copy method makes a complete copy of the array and its data.  >>> >>> d = a.copy()                          # a new array object with new data is created >>> d is a False >>> d.base is a                           # d doesn't share anything with a False >>> d[0,0] = 9999 >>> a array([[   0,   10,   10,    3],        [1234,   10,   10,    7],        [   8,   10,   10,   11]]) Sometimes copy should be called after slicing if the original array is not required anymore. For example, suppose a is a huge intermediate result and the final result b only contains a small fraction of a, a deep copy should be made when constructing b with slicing:  >>> >>> a = np.arange(int(1e8)) >>> b = a[:100].copy() >>> del a  # the memory of ``a`` can be released. If b = a[:100] is used instead, a is referenced by b and will persist in memory even if del a is executed.  Functions and Methods Overview Here is a list of some useful NumPy functions and methods names ordered in categories. See Routines for the full list.  Array Creation arange, array, copy, empty, empty_like, eye, fromfile, fromfunction, identity, linspace, logspace, mgrid, ogrid, ones, ones_like, r_, zeros, zeros_like  Conversions ndarray.astype, atleast_1d, atleast_2d, atleast_3d, mat  Manipulations array_split, column_stack, concatenate, diagonal, dsplit, dstack, hsplit, hstack, ndarray.item, newaxis, ravel, repeat, reshape, resize, squeeze, swapaxes, take, transpose, vsplit, vstack  Questions all, any, nonzero, where  Ordering argmax, argmin, argsort, max, min, ptp, searchsorted, sort  Operations choose, compress, cumprod, cumsum, inner, ndarray.fill, imag, prod, put, putmask, real, sum  Basic Statistics cov, mean, std, var  Basic Linear Algebra cross, dot, outer, linalg.svd, vdot  Less Basic Broadcasting rules Broadcasting allows universal functions to deal in a meaningful way with inputs that do not have exactly the same shape.  The first rule of broadcasting is that if all input arrays do not have the same number of dimensions, a “1” will be repeatedly prepended to the shapes of the smaller arrays until all the arrays have the same number of dimensions.  The second rule of broadcasting ensures that arrays with a size of 1 along a particular dimension act as if they had the size of the array with the largest shape along that dimension. The value of the array element is assumed to be the same along that dimension for the “broadcast” array.  After application of the broadcasting rules, the sizes of all arrays must match. More details can be found in Broadcasting.  Advanced indexing and index tricks NumPy offers more indexing facilities than regular Python sequences. In addition to indexing by integers and slices, as we saw before, arrays can be indexed by arrays of integers and arrays of booleans.  Indexing with Arrays of Indices >>> >>> a = np.arange(12)**2                       # the first 12 square numbers >>> i = np.array([1, 1, 3, 8, 5])              # an array of indices >>> a[i]                                       # the elements of a at the positions i array([ 1,  1,  9, 64, 25]) >>> >>> j = np.array([[3, 4], [9, 7]])      # a bidimensional array of indices >>> a[j]                                       # the same shape as j array([[ 9, 16],        [81, 49]]) When the indexed array a is multidimensional, a single array of indices refers to the first dimension of a. The following example shows this behavior by converting an image of labels into a color image using a palette.  >>> >>> palette = np.array([[0, 0, 0],         # black ...                     [255, 0, 0],       # red ...                     [0, 255, 0],       # green ...                     [0, 0, 255],       # blue ...                     [255, 255, 255]])  # white >>> image = np.array([[0, 1, 2, 0],        # each value corresponds to a color in the palette ...                   [0, 3, 4, 0]]) >>> palette[image]                         # the (2, 4, 3) color image array([[[  0,   0,   0],         [255,   0,   0],         [  0, 255,   0],         [  0,   0,   0]],         [[  0,   0,   0],         [  0,   0, 255],         [255, 255, 255],         [  0,   0,   0]]]) We can also give indexes for more than one dimension. The arrays of indices for each dimension must have the same shape.  >>> >>> a = np.arange(12).reshape(3,4) >>> a array([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11]]) >>> i = np.array([[0, 1],                     # indices for the first dim of a ...               [1, 2]]) >>> j = np.array([[2, 1],                     # indices for the second dim ...               [3, 3]]) >>> >>> a[i, j]                                   # i and j must have equal shape array([[ 2,  5],        [ 7, 11]]) >>> >>> a[i, 2] array([[ 2,  6],        [ 6, 10]]) >>> >>> a[:, j]                                     # i.e., a[ : , j] array([[[ 2,  1],         [ 3,  3]],         [[ 6,  5],         [ 7,  7]],         [[10,  9],         [11, 11]]]) In Python, arr[i, j] is exactly the same as arr[(i, j)]—so we can put i and j in a tuple and then do the indexing with that.  >>> >>> l = (i, j) # equivalent to a[i, j] >>> a[l] array([[ 2,  5],        [ 7, 11]]) However, we can not do this by putting i and j into an array, because this array will be interpreted as indexing the first dimension of a.  >>> >>> s = np.array([i, j])  # not what we want >>> a[s] Traceback (most recent call last):   File ""<stdin>"", line 1, in <module> IndexError: index 3 is out of bounds for axis 0 with size 3  # same as a[i, j] >>> a[tuple(s)] array([[ 2,  5],        [ 7, 11]]) Another common use of indexing with arrays is the search of the maximum value of time-dependent series:  >>> >>> time = np.linspace(20, 145, 5)                 # time scale >>> data = np.sin(np.arange(20)).reshape(5,4)      # 4 time-dependent series >>> time array([ 20.  ,  51.25,  82.5 , 113.75, 145.  ]) >>> data array([[ 0.        ,  0.84147098,  0.90929743,  0.14112001],        [-0.7568025 , -0.95892427, -0.2794155 ,  0.6569866 ],        [ 0.98935825,  0.41211849, -0.54402111, -0.99999021],        [-0.53657292,  0.42016704,  0.99060736,  0.65028784],        [-0.28790332, -0.96139749, -0.75098725,  0.14987721]])  # index of the maxima for each series >>> ind = data.argmax(axis=0) >>> ind array([2, 0, 3, 1])  # times corresponding to the maxima >>> time_max = time[ind] >>> >>> data_max = data[ind, range(data.shape[1])] # => data[ind[0],0], data[ind[1],1]...  >>> time_max array([ 82.5 ,  20.  , 113.75,  51.25]) >>> data_max array([0.98935825, 0.84147098, 0.99060736, 0.6569866 ])  >>> np.all(data_max == data.max(axis=0)) True You can also use indexing with arrays as a target to assign to:  >>> >>> a = np.arange(5) >>> a array([0, 1, 2, 3, 4]) >>> a[[1,3,4]] = 0 >>> a array([0, 0, 2, 0, 0]) However, when the list of indices contains repetitions, the assignment is done several times, leaving behind the last value:  >>> >>> a = np.arange(5) >>> a[[0,0,2]]=[1,2,3] >>> a array([2, 1, 3, 3, 4]) This is reasonable enough, but watch out if you want to use Python’s += construct, as it may not do what you expect:  >>> >>> a = np.arange(5) >>> a[[0,0,2]]+=1 >>> a array([1, 1, 3, 3, 4]) Even though 0 occurs twice in the list of indices, the 0th element is only incremented once. This is because Python requires “a+=1” to be equivalent to “a = a + 1”.  Indexing with Boolean Arrays When we index arrays with arrays of (integer) indices we are providing the list of indices to pick. With boolean indices the approach is different; we explicitly choose which items in the array we want and which ones we don’t.  The most natural way one can think of for boolean indexing is to use boolean arrays that have the same shape as the original array:  >>> >>> a = np.arange(12).reshape(3,4) >>> b = a > 4 >>> b                                          # b is a boolean with a's shape array([[False, False, False, False],        [False,  True,  True,  True],        [ True,  True,  True,  True]]) >>> a[b]                                       # 1d array with the selected elements array([ 5,  6,  7,  8,  9, 10, 11]) This property can be very useful in assignments:  >>> >>> a[b] = 0                                   # All elements of 'a' higher than 4 become 0 >>> a array([[0, 1, 2, 3],        [4, 0, 0, 0],        [0, 0, 0, 0]]) You can look at the following example to see how to use boolean indexing to generate an image of the Mandelbrot set:  >>> import numpy as np import matplotlib.pyplot as plt def mandelbrot( h,w, maxit=20 ):     """"""Returns an image of the Mandelbrot fractal of size (h,w).""""""     y,x = np.ogrid[ -1.4:1.4:h*1j, -2:0.8:w*1j ]     c = x+y*1j     z = c     divtime = maxit + np.zeros(z.shape, dtype=int)      for i in range(maxit):         z = z**2 + c         diverge = z*np.conj(z) > 2**2            # who is diverging         div_now = diverge & (divtime==maxit)  # who is diverging now         divtime[div_now] = i                  # note when         z[diverge] = 2                        # avoid diverging too much      return divtime plt.imshow(mandelbrot(400,400)) ../_images/quickstart-1.png The second way of indexing with booleans is more similar to integer indexing; for each dimension of the array we give a 1D boolean array selecting the slices we want:  >>> >>> a = np.arange(12).reshape(3,4) >>> b1 = np.array([False,True,True])             # first dim selection >>> b2 = np.array([True,False,True,False])       # second dim selection >>> >>> a[b1,:]                                   # selecting rows array([[ 4,  5,  6,  7],        [ 8,  9, 10, 11]]) >>> >>> a[b1]                                     # same thing array([[ 4,  5,  6,  7],        [ 8,  9, 10, 11]]) >>> >>> a[:,b2]                                   # selecting columns array([[ 0,  2],        [ 4,  6],        [ 8, 10]]) >>> >>> a[b1,b2]                                  # a weird thing to do array([ 4, 10]) Note that the length of the 1D boolean array must coincide with the length of the dimension (or axis) you want to slice. In the previous example, b1 has length 3 (the number of rows in a), and b2 (of length 4) is suitable to index the 2nd axis (columns) of a.  The ix_() function The ix_ function can be used to combine different vectors so as to obtain the result for each n-uplet. For example, if you want to compute all the a+b*c for all the triplets taken from each of the vectors a, b and c:  >>> >>> a = np.array([2,3,4,5]) >>> b = np.array([8,5,4]) >>> c = np.array([5,4,6,8,3]) >>> ax,bx,cx = np.ix_(a,b,c) >>> ax array([[[2]],         [[3]],         [[4]],         [[5]]]) >>> bx array([[[8],         [5],         [4]]]) >>> cx array([[[5, 4, 6, 8, 3]]]) >>> ax.shape, bx.shape, cx.shape ((4, 1, 1), (1, 3, 1), (1, 1, 5)) >>> result = ax+bx*cx >>> result array([[[42, 34, 50, 66, 26],         [27, 22, 32, 42, 17],         [22, 18, 26, 34, 14]],         [[43, 35, 51, 67, 27],         [28, 23, 33, 43, 18],         [23, 19, 27, 35, 15]],         [[44, 36, 52, 68, 28],         [29, 24, 34, 44, 19],         [24, 20, 28, 36, 16]],         [[45, 37, 53, 69, 29],         [30, 25, 35, 45, 20],         [25, 21, 29, 37, 17]]]) >>> result[3,2,4] 17 >>> a[3]+b[2]*c[4] 17 You could also implement the reduce as follows:  >>> >>> def ufunc_reduce(ufct, *vectors): ...    vs = np.ix_(*vectors) ...    r = ufct.identity ...    for v in vs: ...        r = ufct(r,v) ...    return r and then use it as:  >>> >>> ufunc_reduce(np.add,a,b,c) array([[[15, 14, 16, 18, 13],         [12, 11, 13, 15, 10],         [11, 10, 12, 14,  9]],         [[16, 15, 17, 19, 14],         [13, 12, 14, 16, 11],         [12, 11, 13, 15, 10]],         [[17, 16, 18, 20, 15],         [14, 13, 15, 17, 12],         [13, 12, 14, 16, 11]],         [[18, 17, 19, 21, 16],         [15, 14, 16, 18, 13],         [14, 13, 15, 17, 12]]]) The advantage of this version of reduce compared to the normal ufunc.reduce is that it makes use of the Broadcasting Rules in order to avoid creating an argument array the size of the output times the number of vectors.  Indexing with strings See Structured arrays.  Linear Algebra Work in progress. Basic linear algebra to be included here.  Simple Array Operations See linalg.py in numpy folder for more.  >>> >>> import numpy as np >>> a = np.array([[1.0, 2.0], [3.0, 4.0]]) >>> print(a) [[1. 2.]  [3. 4.]]  >>> a.transpose() array([[1., 3.],        [2., 4.]])  >>> np.linalg.inv(a) array([[-2. ,  1. ],        [ 1.5, -0.5]])  >>> u = np.eye(2) # unit 2x2 matrix; ""eye"" represents ""I"" >>> u array([[1., 0.],        [0., 1.]]) >>> j = np.array([[0.0, -1.0], [1.0, 0.0]])  >>> j @ j        # matrix product array([[-1.,  0.],        [ 0., -1.]])  >>> np.trace(u)  # trace 2.0  >>> y = np.array([[5.], [7.]]) >>> np.linalg.solve(a, y) array([[-3.],        [ 4.]])  >>> np.linalg.eig(j) (array([0.+1.j, 0.-1.j]), array([[0.70710678+0.j        , 0.70710678-0.j        ],        [0.        -0.70710678j, 0.        +0.70710678j]])) Parameters:     square matrix Returns     The eigenvalues, each repeated according to its multiplicity.     The normalized (unit ""length"") eigenvectors, such that the     column ``v[:,i]`` is the eigenvector corresponding to the     eigenvalue ``w[i]`` . Tricks and Tips Here we give a list of short and useful tips.  “Automatic” Reshaping To change the dimensions of an array, you can omit one of the sizes which will then be deduced automatically:  >>> >>> a = np.arange(30) >>> b = a.reshape((2, -1, 3))  # -1 means ""whatever is needed"" >>> b.shape (2, 5, 3) >>> b array([[[ 0,  1,  2],         [ 3,  4,  5],         [ 6,  7,  8],         [ 9, 10, 11],         [12, 13, 14]],         [[15, 16, 17],         [18, 19, 20],         [21, 22, 23],         [24, 25, 26],         [27, 28, 29]]]) Vector Stacking How do we construct a 2D array from a list of equally-sized row vectors? In MATLAB this is quite easy: if x and y are two vectors of the same length you only need do m=[x;y]. In NumPy this works via the functions column_stack, dstack, hstack and vstack, depending on the dimension in which the stacking is to be done. For example:  >>> >>> x = np.arange(0,10,2) >>> y = np.arange(5) >>> m = np.vstack([x,y]) >>> m array([[0, 2, 4, 6, 8],        [0, 1, 2, 3, 4]]) >>> xy = np.hstack([x,y]) >>> xy array([0, 2, 4, 6, 8, 0, 1, 2, 3, 4]) The logic behind those functions in more than two dimensions can be strange.  See also NumPy for Matlab users  Histograms The NumPy histogram function applied to an array returns a pair of vectors: the histogram of the array and a vector of the bin edges. Beware: matplotlib also has a function to build histograms (called hist, as in Matlab) that differs from the one in NumPy. The main difference is that pylab.hist plots the histogram automatically, while numpy.histogram only generates the data.  >>> import numpy as np rg = np.random.default_rng(1) import matplotlib.pyplot as plt # Build a vector of 10000 normal deviates with variance 0.5^2 and mean 2 mu, sigma = 2, 0.5 v = rg.normal(mu,sigma,10000) # Plot a normalized histogram with 50 bins plt.hist(v, bins=50, density=1)       # matplotlib version (plot) # Compute the histogram with numpy and then plot it (n, bins) = np.histogram(v, bins=50, density=True)  # NumPy version (no plot) plt.plot(.5*(bins[1:]+bins[:-1]), n) ../_images/quickstart-2.png Further reading The Python tutorial  NumPy Reference  SciPy Tutorial  SciPy Lecture Notes  A matlab, R, IDL, NumPy/SciPy dictionary  © Copyright 2008-2020, The SciPy community. Last updated on Jun 29, 2020. Created using Sphinx 2.4.4.",2,0,2,3d+vector+space,GitHub
8,3dManipulation,https://github.com/Aaronlozhkin/3dManipulation.git,"'3dPlot' will take a vector and translate, scale, and rotate that vector in 3d space. '2dProjection' will take a given vector and project it onto a given plane. Implemented using Numpy and MatPlotLib.",1,2,1,3d+vector+space,GitHub
9,Operations-on-3D-Vector-Spaces-in-C-programming,https://github.com/tasbaran77/Operations-on-3D-Vector-Spaces-in-C-programming.git,It was for a school project about 'Operations on 3D Vector Spaces' that I completed myself.,1,0,1,3d+vector+space,GitHub
10,3DRender,https://github.com/wiedma/3DRender.git,We want to render points in 3D space using Vector calculations,1,0,1,3d+vector+space,GitHub
11,vector3-calc,https://github.com/reseeded/vector3-calc.git,math I used to define vector and calculate magnitude in a 3d space,1,0,1,3d+vector+space,GitHub
12,Vector,https://github.com/diracmcpn/Vector.git,Representations and Operations of vectors in plane (2D) and space (3D) in cartesian coordinate.,1,0,1,3d+vector+space,GitHub
13,Inertial-Odometry,https://github.com/AI-madman/Inertial-Odometry.git,Computes the 6 Degree of Freedom Pose of an Agent in a 3D vector-space based on IMU data.,1,0,1,3d+vector+space,GitHub
14,Point_cloud_research,https://github.com/Chinmaykalvade/Point_cloud_research.git,The given ipython notebooks list various approaches to find local reference vectors for a point cloud in 3D space.,1,0,1,3d+vector+space,GitHub
15,Magnetostatics,https://github.com/kell1353/Magnetostatics.git,The program calculates the magnetic vector field around a arbitrary long current flowing wire and current loop within a chosen 3D space. Then plots and the resulting calculations run in Mayavi.,1,0,1,3d+vector+space,GitHub
16,FLIGHTSIMULATOR,https://github.com/dodoman767/FLIGHTSIMULATOR.git,"Controls: Pitch: W+S, Roll: A+D, Yaw: Q+E, Up: Shift, down: Space, Speed: +/-  |Using Processing with build in 3D API, and vector calculations, made a flight simulator based on random terrain generation and vector manipulation to create illusion of yaw pitch and speed. ",1,0,1,3d+vector+space,GitHub
17,fvector3d,https://github.com/kasworld/fvector3d.git,float vector in 3d space,0,0,0,3d+vector+space,GitHub
18,c3d,https://github.com/dburggie/c3d.git,3d vector space objects in C++,0,0,0,3d+vector+space,GitHub
19,Libsimu1,https://github.com/nuzillard/Libsimu1.git,Vector rotation in the 3D space,0,0,0,3d+vector+space,GitHub
20,Vector,https://github.com/rsaucier/Vector.git,A C++ class for performing vector algebra in 3D space,0,0,0,3d+vector+space,GitHub
21,linalg_vectors,https://github.com/amasotti/linalg_vectors.git,simple script to visualize vectors in 3d space,0,0,0,3d+vector+space,GitHub
22,ShooterPrototype,https://github.com/NovaZHart/ShooterPrototype.git,"Prototype of 3D space vector shooter, to be renamed later.",0,0,0,3d+vector+space,GitHub
23,colSpace,https://github.com/ReneMayer/colSpace.git,R package: graphs 3d column space (vector space) from a linear model,0,0,0,3d+vector+space,GitHub
24,3d-vector-viewer,https://github.com/YL-byte/3d-vector-viewer.git,A simple 3d engine based on 3d-Vectors an operators designed to show the 3D space in 2D,0,0,0,3d+vector+space,GitHub
25,vector,https://github.com/eduguzgar/vector.git,Simple classes to do calculations with tridimensional (3D) vectors and bidimensional (2D) vectors in the euclidean space.,0,0,0,3d+vector+space,GitHub
26,fontpath-vecmath,https://github.com/mattdesl/fontpath-vecmath.git,Some vector utilities for dealing with font glyph positioning in 2D and 3D space.,0,0,0,3d+vector+space,GitHub
27,vectors,https://github.com/jacobkj314/vectors.git,A VBA project I made to rotate Vectors in 3D space,0,0,0,3d+vector+space,GitHub
28,Rotation,https://github.com/rsaucier/Rotation.git,A C++ class for performing rotations of vectors in 3D space,0,0,0,3d+vector+space,GitHub
29,Aleatory_vectors,https://github.com/Ale0601/Aleatory_vectors.git,Fortran code for a isotropic distribution of vector in 3d space.,0,0,0,3d+vector+space,GitHub
30,space,https://github.com/jmbarzee/space.git,"Space is a lightweight implementation of 3d math. It supports, vectors, matricies, orientations, and more!",0,1,0,3d+vector+space,GitHub
31,3d-vector-space-cab,https://github.com/shatteredscreens/3d-vector-space-cab.git,"3D Vector Space Cab, by Fell of Shattered Screens for Ludum Dare 38",0,0,0,3d+vector+space,GitHub
32,3DVectors2Alignment,https://github.com/ryo-ARAKI/3DVectors2Alignment.git,Compute alignment (angle to certain axes) of vectors defined in 3D space,0,0,0,3d+vector+space,GitHub
33,Aleatory_vectors,https://github.com/Ale0601/Aleatory_vectors.git,Fortran code for a isotropic distribution of vector in 3d space.,0,0,0,3d+vector+space,GitHub
34,Space-Vectors,https://github.com/ZacksterUG/Space-Vectors.git,"This is the class of simple 3D vectors, that work the same as vectors in geometrical space, all operations are available",0,0,0,3d+vector+space,GitHub
35,Paraview-Wave-Simulation,https://github.com/cosmicoder/Paraview-Wave-Simulation.git,A simple code to visualize different types of waves in space with 2D density variation and 3D velocity vector variation.,0,1,0,3d+vector+space,GitHub
36,Vector-Visualiser,https://github.com/Podcakero/Vector-Visualiser.git,"A project for my Math 251, Multivariable Calculus, class which visualizes vectors in 3d space as well as performing mathematical operations on them using JavaFX and jzy3d",0,0,0,3d+vector+space,GitHub
37,3D-Space-Calculations,https://github.com/vyper0016/3D-Space-Calculations.git,"A simple program to perform simple calculations related to points, vectors, plains and lines in 3D space (a work in progress)",0,0,0,3d+vector+space,GitHub
38,Vector-Object3D,https://github.com/pawelkrol/Vector-Object3D.git,"Vector::Object3D is Perl module providing most basic procedures to facilitate handling of vector object calculations in the 3D space, including fundamental transformations as well as perspective 2D casting.",0,0,0,3d+vector+space,GitHub
39,Creating-team-vectors-with-autoencoders,https://github.com/maxpolaczuk/Creating-team-vectors-with-autoencoders.git,"So basically, take a large ""team"" vector which looks something like (0,0,...,1,...,1,1,0,...,1)  which is huge in dimension and map the team in a lower dim vector space (I have chosen 3D for graphical reasons)...",0,0,0,3d+vector+space,GitHub
40,Projection-and-its-algorithm,https://github.com/sumit-6/Projection-and-its-algorithm.git,"In this program, we will encounter an algorithm to take the projection of any 3D polyhedron onto a plane passing through a specific point inside it. We will be engaged with linear algebra, linear space transformation, 3D geometry involving equation of planes and lines, vector algebra, inverse trigonometry and 3D spherical coordinate system.",0,1,0,3d+vector+space,GitHub
41,Angle-Between-2-Vectors-in-3D-space,https://github.com/ez98/Angle-Between-2-Vectors-in-3D-space.git,The way I practiced Python as an undergrad was to think of concepts that I learned from Calculus 3 and write the code that will represent that specific concept. This tool takes the input of two vectors in 3D space and finds the angle between them.,0,0,0,3d+vector+space,GitHub
